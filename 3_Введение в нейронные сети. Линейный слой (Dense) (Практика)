{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"\"Базовый блок | Введение в нейронные сети. Линейный слой (Dense) (Практика) | УИИ\"","provenance":[{"file_id":"1kPOJIH14RC644xgBDfmbU5Rq-iP5sKU-","timestamp":1643637392730},{"file_id":"1JB-gsHHDtvQuBynmN02ppUow34XTYQcE","timestamp":1628158711007},{"file_id":"1d2l6PV5ZKEUvr5y0HQqsHbRSpaIBwOsS","timestamp":1623851078938},{"file_id":"1fOnzkQaf6RRE2aiLTIZS7ucq05dA4Y7E","timestamp":1623851043536},{"file_id":"1qvH-YL_AHJpL1_W78j3bQfpO4rArjpWZ","timestamp":1623147296114},{"file_id":"1EAOCPLuP_dAS4-ZjdkBKUf8QPM-6DsvV","timestamp":1622303400749},{"file_id":"1A2IEoeLMIBFAsRwIflX8R65Xf5FGqtZI","timestamp":1622303367050},{"file_id":"1pwIM9cI_Jm1xImQZ1Qc2Rg6KPNc8s1C3","timestamp":1622035515033}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"MIp13M39X4pG"},"source":["**Содержание**:\n","\n","1. [Теория](https://colab.research.google.com/drive/1JB-gsHHDtvQuBynmN02ppUow34XTYQcE?usp=sharing)\n","2. Практический ноутбук"]},{"cell_type":"markdown","metadata":{"id":"uQLqsf5_qbzl"},"source":["# Создание модели нейронной сети"]},{"cell_type":"markdown","metadata":{"id":"N6hhUkv_qyAh"},"source":["В этой части вы научитесь создавать собственную нейронную сеть. Это можно сделать всего в несколько строк с помощью библиотеки **Keras**. Подключите основу – класс создания последовательной модели **Sequential**.\n"]},{"cell_type":"code","metadata":{"id":"uwa6i4wAqA_o","executionInfo":{"status":"ok","timestamp":1643638295674,"user_tz":-180,"elapsed":318,"user":{"displayName":"Kirill Volkov","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09167675469754145494"}}},"source":["from tensorflow.keras.models import Sequential"],"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"o41umt92rzAC"},"source":["С помощью него создайте экземпляр вашей модели:"]},{"cell_type":"code","metadata":{"id":"5L7YjGn7qbEV","executionInfo":{"status":"ok","timestamp":1643638295883,"user_tz":-180,"elapsed":4,"user":{"displayName":"Kirill Volkov","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09167675469754145494"}}},"source":["model = Sequential()"],"execution_count":7,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SHVFI73xsBF6"},"source":["Это и есть ваша модель! Сейчас она больше похожа на пустую коробку. Чтобы она что-то делала, нужно поместить в нее какой-нибудь механизм. Это не механизм в обычном смысле слова, потому что вы будете оперировать не предметами, а информацией – главным ресурсом XXI века. Механизм будет принимать на вход и выдавать на выходе какие-то данные.\n","\n","**Объекты**\n","\n","Так из чего же вы можете создать механизм? Для начала определитесь, сколько информации вы будете давать нейросети на вход. Один экземпляр такой информации называется **объектом**, который всегда состоит из чисел. Позже вы рассмотрите, как они устроены и какими бывают. \n","\n","Допустим, вы решили, что каждый ваш входной объект состоит из **10** чисел. Настройте сеть на вход из **10** чисел:"]},{"cell_type":"code","metadata":{"id":"pc872zkW1Z0o","executionInfo":{"status":"ok","timestamp":1643638296787,"user_tz":-180,"elapsed":5,"user":{"displayName":"Kirill Volkov","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09167675469754145494"}}},"source":["from tensorflow.keras.layers import Dense\n","model.add(Dense(32, input_dim=10))"],"execution_count":8,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xQ277C5x32N7"},"source":["Внутри нейросеть состоит из слоев нейронов, и только что вы создали один из них. Этот первый слой называется ***Dense***-слоем (линейным или полносвязным слоем). Здесь же вы указали с помощью параметра **input_dim**, что ваша сеть принимает на вход последовательность из **10** чисел:\n","\n","Полносвязный слой чаще других используется в нейросетях. Как механизм делится по слоям, так и некоторые слои тоже делятся на составляющие элементы. В разных слоях они имеют разные функции и названия. Например, в линейном слое этими элементами выступают **полносвязные нейроны**. \n","\n","Их количество задается самым первым аргументом (в примере: **32**). \n","\n","Нужно ли создавать выход сети? На самом деле нет. Результат, который выдает последний слой, и есть выход сети.\n","\n","Значит, сеть готова к работе? Еще нет, потому что для работы нужно ее еще скомпилировать (собрать, подготовить к обучению) и обучить. \n","\n","Для подготовки к обучению вам понадобятся еще две вещи – ***оптимизатор*** и ***функция потерь*** (или ***функция ошибки***). Они задаются с помощью метода модели `.compile()`:"]},{"cell_type":"code","metadata":{"id":"ao55osyv5Wkg","executionInfo":{"status":"ok","timestamp":1643638313408,"user_tz":-180,"elapsed":273,"user":{"displayName":"Kirill Volkov","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09167675469754145494"}}},"source":["model.compile(loss='categorical_crossentropy', \n","              optimizer='adam')"],"execution_count":9,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3hL8135BycKC"},"source":["При обучении нейронной сети обязательно указывают оптимизатор и функцию ошибки.\n","\n","---\n","Дополнительная информация ([База знаний УИИ - «**Оптимизаторы (Light-версия)**»](https://colab.research.google.com/drive/1F9NTQzqEOrZeVbYm-urrxh7SrrrFZ1yg?usp=sharing))\n","\n","Дополнительная информация ([База знаний УИИ - «**Оптимизаторы (Pro-версия)**»](https://colab.research.google.com/drive/1ErzVXvNJoSURyua5RPVG_eawaLAP6_PE?usp=sharing))\n","\n","---\n","---\n","Дополнительная информация ([База знаний УИИ - «**Функции потерь**»](https://colab.research.google.com/drive/1ZlmUDi7csXboFXwN22D_pLDYQcvJmt07?usp=sharing))\n","\n","---\n","Посмотрим, как теперь выглядит сеть, вызывая метод `.summary()`:\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1z8jTdAj8Ty_","executionInfo":{"status":"ok","timestamp":1628533037963,"user_tz":-480,"elapsed":7,"user":{"displayName":"Sergei Rozinov","photoUrl":"","userId":"04258416304408372307"}},"outputId":"e3718ae6-6a05-491f-b1e5-0b15740a4ca5"},"source":["model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","dense (Dense)                (None, 32)                352       \n","=================================================================\n","Total params: 352\n","Trainable params: 352\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"0PVW6aXdVIJd"},"source":["Внимательно посмотрите на получившееся количество параметров. \n","\n","При входе сети из **10** чисел и Dense-слое с **32** нейронами количество весовых коэффициентов будет $10 * 32 = 320$. Но, как видите, оно получается на **32** больше. Это происходит из-за наличия в слое ***нейрона смещения***.\n","\n","Для чего он нужен? Бывают ситуации, в которых нейросеть просто не сможет найти верное решение из-за того, что нужная точка будет находиться вне пределов досягаемости. Именно для этого и нужны такие нейроны, чтобы иметь возможность сместить область определения.\n","\n","Схематически нейроны смещения обычно не обозначаются, их вес учитывается по умолчанию при работе нейрона.\n","\n","---\n","Дополнительная информация ([База знаний УИИ - «**Нейрон смещения**»](https://colab.research.google.com/drive/1sa3goy6ITOlBrOwwqryWnpoZj69HpNwj?usp=sharing))\n","\n","---\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"7um03-a28oZw"},"source":["Вы можете заметить, что у сети есть название **\"sequential\"**. Оно автоматически присваивается при создании. \n","\n","У слоев также есть названия. Они указаны в левой колонке.\n","\n","Колонка **\"Output Shape\"** показывает форму данных на выходе нейронного слоя. \n","\n","В данном случае у вас получается:\n","* на вход нейронной сети подается последовательность из **10** элементов (вы указали это с помощью параметра **input_dim**)\n","* нейронная сеть состоит из одного слоя (**Dense**), который состоит из **32** нейронов (количество нейронов вы указали при создании слоя)\n","* на выходе нейронной сети будет последовательность из **32** элементов (выход нейронной сети равен выходу последнего слоя)\n","\n","В выведенной информации вы можете увидеть строку **\"Total params: 352\"**. В ней указано общее количество параметров модели.\n","\n","**Параметры**\n","\n","Параметры модели – это все веса, внутренние настройки сети, которые определяют, как будет преобразован объект, подаваемый в сеть, прежде чем оказаться на выходе. Они автоматически изменяются при обучении.\n","\n","Вы можете добавлять неограниченное количество слоев к сети:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2xMiZgC8-3Iu","executionInfo":{"status":"ok","timestamp":1628533038644,"user_tz":-480,"elapsed":687,"user":{"displayName":"Sergei Rozinov","photoUrl":"","userId":"04258416304408372307"}},"outputId":"0f0f92ce-361a-47e4-e578-47946e9f6925"},"source":["model = Sequential()\n","model.add(Dense(32, input_dim=10))\n","model.add(Dense(5))\n","model.add(Dense(1))\n","\n","model.summary()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","dense_1 (Dense)              (None, 32)                352       \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 5)                 165       \n","_________________________________________________________________\n","dense_3 (Dense)              (None, 1)                 6         \n","=================================================================\n","Total params: 523\n","Trainable params: 523\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"FeuH33JH_FzH"},"source":["Выше добавлено еще два линейных слоя. Теперь выход изменился: сеть на выходе выдает одно число. Как видите, также изменилось и общее число параметров. Чем больше слоев и нейронов в слоях, тем больше параметров сети.\n","\n","Далее вы узнаете, как обучить модель нейронной сети.\n"]},{"cell_type":"markdown","metadata":{"id":"nqZpzs2nBs63"},"source":["# Распознавание рукописных цифр **MNIST**"]},{"cell_type":"markdown","metadata":{"id":"09mNX8pfryle"},"source":["Теперь вы научитесь делать удивительные вещи благодаря нейронным сетям. Если быть точнее, вы буквально в несколько строчек кода создадите собственную нейронную сеть и научите ее с высокой точностью распознавать рукописные цифры, изображенные на картинках. То есть на вход нейросети будет приходить картинка с изображением цифры, а на выходе вы получите значение цифры (число). \n"]},{"cell_type":"markdown","metadata":{"id":"qLX9aj3eFCPB"},"source":["## Подготовка данных"]},{"cell_type":"markdown","metadata":{"id":"WuUPhk0LxJBJ"},"source":["Для начала добавьте в проект все необходимые модули:\n","* **mnist** – модуль для загрузки набора данных рукописных цифр, который вы используете при обучении нейронной сети;\n","* **Sequential** – модуль для создания последовательной модели нейронной сети;\n","* **Dense** – линейный (полносвязный) слой. Из таких слоев будет создана ваша нейросеть;\n","* **utils** – модуль с полезными инструментами для подготовки данных;\n","* **plt** – модуль рисования графиков."]},{"cell_type":"code","metadata":{"id":"co9Q1s42SciM"},"source":["from tensorflow.keras.datasets import mnist     # Библиотека с базой рукописных цифр\n","from tensorflow.keras.models import Sequential  # Подключение класса создания модели Sequential\n","from tensorflow.keras.layers import Dense       # Подключение класса Dense - полносвязный слой\n","from tensorflow.keras import utils              # Утилиты для подготовки данных\n","import numpy as np                              # Работа с массивами\n","import matplotlib.pyplot as plt                 # Отрисовка изображений\n","\n","# Отрисовка изображений в ячейках ноутбука\n","%matplotlib inline "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qcl42oYz1wUy"},"source":["Чтобы чему-то научить вашу нейронную сеть, понадобится набор данных для задачи, которую вы собираетесь решать. У вас это набор картинок, на которых изображены рукописные цифры от **0** до **9**. Следующей строкой кода вы скачаете эти данные:\n","* **x_train_org**, **y_train_org** – изображения для обучения нейронной сети;\n","* **x_test_org**, **y_test_org** – изображения для тестирования нейронной сети.\n"]},{"cell_type":"code","metadata":{"id":"xnYVjcnJC4TY"},"source":["# Загрузка из облака данных Mnist\n","(x_train_org, y_train_org), (x_test_org, y_test_org) = mnist.load_data()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Yoc55EeF5HSw"},"source":["Сейчас те самые картинки, с помощью которых вы будете обучать нейронную сеть, представляют из себя матрицы чисел, где каждое число – это значение яркости пиксела (от **0** до **255**). Таких изображений в вашем тренировочном наборе данных **60000**, и их размер **28** на **28** пикселов. Поэтому форма массива данных выглядит так:"]},{"cell_type":"code","metadata":{"id":"ixb5KVPvdHT7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628533038646,"user_tz":-480,"elapsed":8,"user":{"displayName":"Sergei Rozinov","photoUrl":"","userId":"04258416304408372307"}},"outputId":"493752b2-01a0-4698-cb02-6e69f5a31c89"},"source":["# Вывод формы данных для обучения\n","x_train_org.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(60000, 28, 28)"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"markdown","metadata":{"id":"d6FaooGK7Epa"},"source":["Убедитесь, что ваши данные действительно представляют собой картинки с числами.\n","\n","Для этого выберите из массива **x_train_org** какую-нибудь матрицу чисел и отобразите ее в серой шкале:"]},{"cell_type":"code","metadata":{"id":"ts-z0Oh_EJJ_","colab":{"base_uri":"https://localhost:8080/","height":265},"executionInfo":{"status":"ok","timestamp":1628533087749,"user_tz":-480,"elapsed":444,"user":{"displayName":"Sergei Rozinov","photoUrl":"","userId":"04258416304408372307"}},"outputId":"41ffff31-d032-400a-97f8-8a1616c7d334"},"source":["# Номер картинки\n","n = 143\n","\n","# Отрисовка картинки\n","plt.imshow(x_train_org[n], cmap='gray')\n","\n","# Вывод n-й картинки\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"Dbkf_3xo9FL0"},"source":["Видите изображение цифры **2**? \n","\n","Если же вы взглянете на массив **y_train_org**, который содержит в себе метки для картинок (то есть правильные значения распознаваемых цифр на картинках), то увидите, что этой картинке соответствует значение **2**:\n"]},{"cell_type":"code","metadata":{"id":"3D8FrTQMx8cs","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628533131965,"user_tz":-480,"elapsed":417,"user":{"displayName":"Sergei Rozinov","photoUrl":"","userId":"04258416304408372307"}},"outputId":"896709b1-3b4b-49b3-e89b-d08c27776524"},"source":["# Вывод метки класса для n-го изображения\n","print(y_train_org[n])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"MYxONEpQ9oAI"},"source":["Сейчас ваши данные имеют сложную структуру, где каждая картинка представляет собой двумерный массив данных. \n","\n","Для обучения нейронной сети вам необходимо преобразовать изображение в более простой вид – в одномерную последовательность чисел (вектор). \n","\n","Сделайте это с помощью метода `.reshape()`:\n"]},{"cell_type":"code","metadata":{"id":"StxOw0C6EQQd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628533733057,"user_tz":-480,"elapsed":417,"user":{"displayName":"Sergei Rozinov","photoUrl":"","userId":"04258416304408372307"}},"outputId":"46c6d7aa-9194-46b7-cfe6-41002e882583"},"source":["# Изменение формы входных картинок с 28х28 на 784\n","# первая ось остается без изменения, остальные складываются в вектор\n","x_train = x_train_org.reshape(x_train_org.shape[0], -1)   \n","x_test = x_test_org.reshape(x_test_org.shape[0], -1)   \n","\n","# Проверка результата\n","print(f'Форма обучающих данных: {x_train_org.shape} -> {x_train.shape}')\n","print(f'Форма  тестовых данных: {x_test_org.shape} -> {x_test.shape}')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Форма обучающих данных: (60000, 28, 28) -> (60000, 784)\n","Форма  тестовых данных: (10000, 28, 28) -> (10000, 784)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"q8FvBEVo_Suv"},"source":["Теперь каждая картинка представлена в вашем наборе данных последовательностью из **784** чисел **(28x28)**.\n","\n","Как вы уже знаете, чтобы нейронной сети было легче учиться, необходимо привести входные данные к некоему стандартному виду. В нашем случае числа, которые описывают картинку (те самые **784** числа), должны находиться в диапазоне от **0** до **1**, хотя сейчас они  в диапазоне от **0** до **255**, ведь они описывают интенсивность каждого пиксела. Поделив все эти значения на **255**, вы нормализуете входные данные:\n"]},{"cell_type":"code","metadata":{"id":"R5cW-u8eEXBN"},"source":["# Нормализация входных картинок\n","# Преобразование x_train в тип float32 (числа с плавающей точкой) и нормализация\n","x_train = x_train.astype('float32') / 255.\n","\n","# Преобразование x_test в тип float32 (числа с плавающей точкой) и нормализация\n","x_test = x_test.astype('float32') / 255."],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GHxQ4sxXAtGH"},"source":["Также нужно провести некоторые преобразования и с метками классов, то есть с теми числами, которые отвечают на вопрос «Что же изображено на картинке?».\n","\n","Для этого нужно привести все метки к виду ***one hot encoding***.\n","\n","Это значит, что каждое число будет представлять собой последовательность (вектор) значений **0** или **1**. Последовательность будет длиной **10**, потому что всего существует **10** цифр, которые вы будете распознавать (от **0** до **9**). В векторе one hot encoding везде стоят нули, кроме позиции самой метки.\n","* Если ответ равен **5**, то one hot encoding представление будет таким:\n","\n","      [0., 0., 0., 0., 0., 1., 0., 0., 0., 0.]\n","\n","* А, например, для класса **3**:\n","\n","      [0., 0., 0., 1., 0., 0., 0., 0., 0., 0.]\n"]},{"cell_type":"markdown","metadata":{"id":"Vnv-c-dwXLhy"},"source":["Чтобы не указывать везде явно число классов, хорошим тоном будет назначить константу. Тогда, если вам захочется использовать удачную архитектуру модели на других данных с другим количеством классов, не придется менять это значение в каждом месте, где оно требуется:"]},{"cell_type":"code","metadata":{"id":"Sj3OcBlZMQbo"},"source":["# Задание константы количества распознаваемых классов\n","\n","CLASS_COUNT = 10"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QWhdJfXSXs7Q"},"source":["Преобразуйте выходные данные в векторы one hot encoding с помощью функции `to_categorical()` модуля **utils**:"]},{"cell_type":"code","metadata":{"id":"zrxFxFA5EsVU"},"source":["# Преобразование ответов в формат one_hot_encoding\n","y_train = utils.to_categorical(y_train_org, CLASS_COUNT)\n","y_test = utils.to_categorical(y_test_org, CLASS_COUNT)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mmkdSUiuDjrg"},"source":["Теперь выходные данные для вашей нейронной сети выглядят следующим образом:"]},{"cell_type":"code","metadata":{"id":"7AiDf79FE2Xk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628534087635,"user_tz":-480,"elapsed":416,"user":{"displayName":"Sergei Rozinov","photoUrl":"","userId":"04258416304408372307"}},"outputId":"9a3be611-c16b-4be7-a0dc-aeca00791875"},"source":["# Вывод формы y_train\n","# 60 тысяч примеров, каждый длины 10 по числу классов\n","print(y_train.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(60000, 10)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"i7MZ1HbBE7me","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628534095319,"user_tz":-480,"elapsed":425,"user":{"displayName":"Sergei Rozinov","photoUrl":"","userId":"04258416304408372307"}},"outputId":"fa391c46-0541-4862-d4ae-50a3f84b23fe"},"source":["# Вывод примера одного выходного вектора\n","print(y_train[0]) "],"execution_count":null,"outputs":[{"output_type":"stream","text":["[0. 0. 0. 0. 0. 1. 0. 0. 0. 0.]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"7u4EFl16Ms1T"},"source":["Для сравнения - в оригинальных выходных данных все метки классов - просто одиночные числа:"]},{"cell_type":"code","metadata":{"id":"LyIjTL5BNxus","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628534105558,"user_tz":-480,"elapsed":543,"user":{"displayName":"Sergei Rozinov","photoUrl":"","userId":"04258416304408372307"}},"outputId":"594a6fde-fe1f-4eed-f620-cfaf13a0cfd4"},"source":["# Вывод формы массива меток\n","print(y_train_org.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(60000,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"L6kqzxeiN0IK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628534113553,"user_tz":-480,"elapsed":428,"user":{"displayName":"Sergei Rozinov","photoUrl":"","userId":"04258416304408372307"}},"outputId":"a6888795-b42e-460c-ef08-d93fbe6ccc40"},"source":["# Вывод метки, соответствующей 36-му элементу\n","print(y_train_org[36])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["6\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"TR6ua7t7FEzn"},"source":["## Создание нейронной сети"]},{"cell_type":"markdown","metadata":{"id":"JtIA5AnuJGDx"},"source":["Теперь самое интересное. Буквально за несколько строчек кода вы создадите свою собственную нейронную сеть, а потом научите ее распознавать цифры!\n","\n","Для начала создайте объект нейронной сети с помощью класса **Sequential**:\n","\n","    model = Sequential()\n","\n","Сейчас это пустая нейронная сеть, не содержащая в себе никаких слоев и нейронов. Добавьте в нее несколько слоев нейронов, идущих друг за другом, последовательно, по образцу:\n","\n","    model.add(Dense(400, activation='relu'))\n","    \n","В данном случае **400** – это количество нейронов в слое, а **'relu'** – функция активации, которая будет применяться после умножения значений входов нейрона на его веса.\n","\n","---\n","Дополнительная информация ([База знаний УИИ - «**Функции активации**»](https://colab.research.google.com/drive/1pGc7CFdrkKBhcXLqZNUzLXH4N83rRAl7?usp=sharing))\n","\n","---"]},{"cell_type":"code","metadata":{"id":"odi8yVyxE-w5"},"source":["# Создание последовательной модели\n","model = Sequential()\n","\n","# Добавление полносвязного слоя на 800 нейронов с relu-активацией\n","model.add(Dense(800, input_dim=784, activation='relu')) \n","\n","# Добавление полносвязного слоя на 400 нейронов с relu-активацией\n","model.add(Dense(400, activation='relu')) \n","\n","# Добавление полносвязного слоя с количеством нейронов по числу классов с softmax-активацией\n","model.add(Dense(CLASS_COUNT, activation='softmax')) "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QmM-RZmRK2ky"},"source":["В целом, вы уже создали нейронную сеть. Теперь нужно подготовить ее к обучению (скомпилировать) и запустить само обучение.\n","\n","Следующей строкой кода вы скомпилируете модель:\n","\n","    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","В методе `.compile()` вы назначаете функцию ошибки (**'categorical_crossentropy'**), оптимизатор нейронной сети (**'adam'**) и метрики, которые будут подсчитываться в процессе обучения нейросети (**['accuracy']**).\n","\n"]},{"cell_type":"markdown","metadata":{"id":"SCDx-ZER1Nfw"},"source":["Метод `.summary()` выведет на экран структуру вашей нейронной сети в виде таблицы:"]},{"cell_type":"code","metadata":{"id":"6EMUkxTqFkc1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628534485691,"user_tz":-480,"elapsed":428,"user":{"displayName":"Sergei Rozinov","photoUrl":"","userId":"04258416304408372307"}},"outputId":"3db104cb-952c-4316-8a0b-a7d8ba8de407"},"source":["# Компиляция модели\n","model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","\n","# Вывод структуры модели\n","print(model.summary())"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"sequential_2\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","dense_4 (Dense)              (None, 800)               628000    \n","_________________________________________________________________\n","dense_5 (Dense)              (None, 400)               320400    \n","_________________________________________________________________\n","dense_6 (Dense)              (None, 10)                4010      \n","=================================================================\n","Total params: 952,410\n","Trainable params: 952,410\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"OH1CnyRlMDOs"},"source":["Функция `plot_model()` модуля `utils` нарисует наглядную схему (граф) нейронной сети, она удобна для понимания и более сложных моделей.\n","\n","Эта функция принимает следующие аргументы:\n","\n","* **model** - модель, схему которой вы хотите построить (обязательный параметр);\n","* **to_file** - имя файла или путь к файлу, в который сохраняется схема (обязательный параметр);\n","* **show_shapes** - Показывать или нет формы входных/выходных данных каждого слоя (необязательный параметр, по умолчанию **False**);\n","* **show_layer_names** - показывать или нет название каждого слоя (необязательный параметр, по умолчанию **True**)."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":422},"id":"37NcuApHNe0D","executionInfo":{"status":"ok","timestamp":1628534569524,"user_tz":-480,"elapsed":657,"user":{"displayName":"Sergei Rozinov","photoUrl":"","userId":"04258416304408372307"}},"outputId":"0db127e8-a335-4217-c63c-6884838de7da"},"source":["utils.plot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=False)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"image/png":"\n","text/plain":["<IPython.core.display.Image object>"]},"metadata":{"tags":[]},"execution_count":31}]},{"cell_type":"markdown","metadata":{"id":"ML7Az8zNOviq"},"source":["Здесь вы впервые сталкиваетесь с сохранением данных.\n","\n","Сейчас сохранение графа модели произойдёт в хранилище виртуальной машины ноутбука. Найти сохраненный файл можно, нажав на иконку **\"Файлы\"** в левой части рабочего пространства Google Colab.\n","\n","В данном случае при завершении сеанса все файлы будут удалены вместе с виртуальной машиной.\n","\n","Если необходимо воспользоваться файлами в дальнейшем, можно сохранить их на свой Google-диск - это постоянное хранилище. Для этого необходимо подключить его:\n","\n","```\n","from google.colab import drive\n","drive.mount('/content/drive/')\n","```\n","Необходимо перейти по ссылке и разрешить доступ. \n","\n","Теперь данные могут быть загружены на диск, но для этого необходимо указывать полный путь для сохранения. \n"]},{"cell_type":"markdown","metadata":{"id":"H4WWjjxnF3qn"},"source":["## Обучение нейронной сети"]},{"cell_type":"markdown","metadata":{"id":"ZdW3f5TZN-da"},"source":["Именно сейчас начнется самая настоящая магия! \n","\n","Одной строчкой кода вы запустите обучение нейронной сети и сможете наблюдать за процессом. \n","\n","Для этого вызовите метод модели `.fit()` и передайте ему данные для обучения - **x_train, y_train**:\n","\n","    model.fit(x_train, y_train, batch_size=128, epochs=15, verbose=1)\n","\n","**batch_size** – размер батча, который указывает нейросети на то, сколько картинок она будет обрабатывать за один раз.\n","\n","**epochs** – количество циклов обучения, то есть сколько раз нейронная сеть повторит просмотр и обучение на всех ваших данных.\n"]},{"cell_type":"code","metadata":{"id":"tzArU3n3F6Lo","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628534936751,"user_tz":-480,"elapsed":116776,"user":{"displayName":"Sergei Rozinov","photoUrl":"","userId":"04258416304408372307"}},"outputId":"c42309d4-b138-45f8-e0f2-2049cd74fcfb"},"source":["model.fit(x_train,        # обучающая выборка, входные данные\n","          y_train,        # обучающая выборка, выходные данные\n","          batch_size=128, # кол-во примеров, которое обрабатывает нейронка перед одним изменением весов\n","          epochs=15,      # количество эпох, когда нейронка обучается на всех примерах выборки\n","          verbose=1)      # 0 - не визуализировать ход обучения, 1 - визуализировать"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/15\n","469/469 [==============================] - 8s 16ms/step - loss: 0.2036 - accuracy: 0.9389\n","Epoch 2/15\n","469/469 [==============================] - 8s 16ms/step - loss: 0.0756 - accuracy: 0.9769\n","Epoch 3/15\n","469/469 [==============================] - 8s 16ms/step - loss: 0.0480 - accuracy: 0.9847\n","Epoch 4/15\n","469/469 [==============================] - 8s 16ms/step - loss: 0.0342 - accuracy: 0.9890\n","Epoch 5/15\n","469/469 [==============================] - 8s 17ms/step - loss: 0.0260 - accuracy: 0.9915\n","Epoch 6/15\n","469/469 [==============================] - 8s 17ms/step - loss: 0.0211 - accuracy: 0.9928\n","Epoch 7/15\n","469/469 [==============================] - 8s 17ms/step - loss: 0.0174 - accuracy: 0.9941\n","Epoch 8/15\n","469/469 [==============================] - 8s 17ms/step - loss: 0.0148 - accuracy: 0.9952\n","Epoch 9/15\n","469/469 [==============================] - 8s 17ms/step - loss: 0.0132 - accuracy: 0.9956\n","Epoch 10/15\n","469/469 [==============================] - 8s 16ms/step - loss: 0.0142 - accuracy: 0.9951\n","Epoch 11/15\n","469/469 [==============================] - 8s 16ms/step - loss: 0.0098 - accuracy: 0.9967\n","Epoch 12/15\n","469/469 [==============================] - 8s 17ms/step - loss: 0.0127 - accuracy: 0.9959\n","Epoch 13/15\n","469/469 [==============================] - 8s 17ms/step - loss: 0.0114 - accuracy: 0.9962\n","Epoch 14/15\n","469/469 [==============================] - 8s 16ms/step - loss: 0.0087 - accuracy: 0.9974\n","Epoch 15/15\n","469/469 [==============================] - 8s 16ms/step - loss: 0.0063 - accuracy: 0.9981\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7fb88ab7f4d0>"]},"metadata":{"tags":[]},"execution_count":32}]},{"cell_type":"markdown","metadata":{"id":"tEkw1UT8PMJz"},"source":["Только что вы наблюдали процесс обучения нейронной сети на 15 эпохах. После каждого цикла обучения вы можете видеть среднее значение ошибки. Обратите внимание, что практически каждую эпоху значение метрики точности (**accuracy**) увеличивается. Это означает, что ваша нейронная сеть с каждым разом делает все более точное распознавание!\n","\n","Теперь сохраните веса вашей модели, чтобы потом можно было снова их использовать:\n"]},{"cell_type":"code","metadata":{"id":"nmxH0W_QSOIX"},"source":["model.save_weights('model.h5')\n","model.load_weights('model.h5')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"h0h2T-M21m0l"},"source":["Метод `.save_weights()` сохранит веса вашей модели в хранилище, а метод `.load_weights()` загрузит их обратно.\n"]},{"cell_type":"markdown","metadata":{"id":"ExUOoWQOGvw6"},"source":["## Распознавание рукописных цифр"]},{"cell_type":"markdown","metadata":{"id":"XRe5XORb12KC"},"source":["Ура! Вы научили нейронную сеть распознавать цифры на картинках с огромной точностью – более **99**%.\n","\n","Теперь вы можете использовать модель по прямому назначению. Выведите на экран какой-нибудь образец из тестового набора данных:\n"]},{"cell_type":"code","metadata":{"id":"ydE7Bb-5G82-","colab":{"base_uri":"https://localhost:8080/","height":265},"executionInfo":{"status":"ok","timestamp":1628537705224,"user_tz":-480,"elapsed":462,"user":{"displayName":"Sergei Rozinov","photoUrl":"","userId":"04258416304408372307"}},"outputId":"7f08d376-2477-44c1-dc7d-a0336f32a3e6"},"source":["# Номер тестовой цифры, которую будем распознавать\n","n_rec = 389\n","\n","# Отображение картинки из тестового набора под номером n_rec\n","plt.imshow(x_test_org[n_rec], cmap='gray')\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"f6fqhME64Sf7"},"source":["Теперь сохраните в переменную **x** эту картинку в виде набора из **784** чисел. \n","\n","Это нужно для того, чтобы нейросеть сделала ***предсказание***, ведь она обучалась работать именно с такими последовательностями чисел:\n"]},{"cell_type":"code","metadata":{"id":"_85gvY6uHABc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628537756761,"user_tz":-480,"elapsed":408,"user":{"displayName":"Sergei Rozinov","photoUrl":"","userId":"04258416304408372307"}},"outputId":"316cc667-f3a2-4cb8-8ae5-ce40666104e1"},"source":["# Выбор нужной картинки из тестовой выборки\n","x = x_test[n_rec]\n","\n","# Проверка формы данных\n","print(x.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(784,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"IljyFhj0HPPC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628537758441,"user_tz":-480,"elapsed":3,"user":{"displayName":"Sergei Rozinov","photoUrl":"","userId":"04258416304408372307"}},"outputId":"5e5c9f65-aead-496f-9f99-d389bdf9a885"},"source":["# Добавление одной оси в начале, чтобы нейронка могла распознать пример\n","# Массив из одного примера, так как нейронка принимает именно массивы примеров (батчи) для распознавания\n","x = np.expand_dims(x, axis=0)\n","\n","# Проверка формы данных\n","print(x.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(1, 784)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"l9nE0l5L483D"},"source":["Чтобы ваша сеть сделала предсказание, нужно вызвать метод `.predict()` и передать в него данные для распознавания:\n"]},{"cell_type":"code","metadata":{"id":"VigT6aeAHQ91"},"source":["# Распознавание примера\n","prediction = model.predict(x) "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GoD4R1fw6YZ8"},"source":["Ответом вашей нейронной сети будет такой массив чисел:\n"]},{"cell_type":"code","metadata":{"id":"fGF9xUCRHSOE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628537763464,"user_tz":-480,"elapsed":432,"user":{"displayName":"Sergei Rozinov","photoUrl":"","userId":"04258416304408372307"}},"outputId":"6a5ad5d6-475c-4cba-eee1-86432a526a38"},"source":["# Вывод результата - вектор из 10 чисел\n","print(prediction)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[7.3494338e-15 3.5296533e-12 3.9147574e-12 2.3130077e-15 1.7387430e-06\n","  5.3687417e-15 3.5024766e-21 9.1579379e-05 9.1114504e-15 9.9990666e-01]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"4GTjsZ2s6x0B"},"source":["Эти числа характеризуют вероятности принадлежности к конкретному классу. Самое первое число в этой последовательности отвечает на вопрос, какова вероятность, что на картинке изображена цифра **0**. Второе число говорит то же самое про цифру **1**. Сумма всех вероятностей равна единице, то есть предполагатся полный набор событий (только цифры от **0** до **9** и ничего другого):"]},{"cell_type":"code","metadata":{"id":"LKR0oFGAYyFi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628535279075,"user_tz":-480,"elapsed":421,"user":{"displayName":"Sergei Rozinov","photoUrl":"","userId":"04258416304408372307"}},"outputId":"412c6cac-8a97-44ff-e0f3-16591ddea833"},"source":["sum(prediction[0])"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.000000000015285"]},"metadata":{"tags":[]},"execution_count":38}]},{"cell_type":"markdown","metadata":{"id":"Jk-eIuw0RSvN"},"source":["Таким образом, индекс самой большой вероятности в этом списке чисел и будет ответом вашей нейронной сети:"]},{"cell_type":"code","metadata":{"id":"9pg67PW9HV4A","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628537791825,"user_tz":-480,"elapsed":412,"user":{"displayName":"Sergei Rozinov","photoUrl":"","userId":"04258416304408372307"}},"outputId":"45aa30b7-fd30-41bc-9077-79f77ce6e989"},"source":["# Получение и вывод индекса самого большого элемента (это значение цифры, которую распознала сеть)\n","pred = np.argmax(prediction)\n","print(pred)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["9\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"v3tYZT8U7Sk7"},"source":["Как видите, ваша сеть находит правильный ответ для картинки с изображением цифры 9."]},{"cell_type":"code","metadata":{"id":"72Rbs1E9HeRZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628537797316,"user_tz":-480,"elapsed":415,"user":{"displayName":"Sergei Rozinov","photoUrl":"","userId":"04258416304408372307"}},"outputId":"1d085063-bc04-46d6-ae3c-8de38ed22801"},"source":["# Вывод правильного ответа для сравнения\n","print(y_test_org[n_rec])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["9\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"uf_Rqrm74dmq"},"source":["# Подведем итоги: вспомним изученный материал"]},{"cell_type":"markdown","metadata":{"id":"JIig80OvHr4Q"},"source":["В первой части вы познакомились с ИИ, узнали, что он бывает сильным и слабым, и то, что к 2050 развитие технологии достигнет пика. Для ИИ практически нет неразрешимых задач, и область его использования безгранична. Еще вы узнали, что нейронная сеть неспроста так называется, и у нее есть прототип – человеческий мозг и нейроны, из которых он состоит. \n","\n","Далее вы перешли к рассмотрению различных моделей нейрона (биологической и математической). В НС нейроны отвечают за выделение определенного признака, при этом некоторое количество нейронов организовано в слои. Несколько слоев нейронов могут называться полноценной НС.\n","\n","Сама по себе сеть без обучения не может хорошо решать задачи. Для этого ей требуются две выборки – обучающая и проверочная. Используя их, НС узнает, как правильно выполнить задачу. В этом ей помогает функция ошибки, которая указывает, в правильную ли сторону НС меняет свои веса. После этого вы познакомились с полносвязным слоем, нейроны которого связаны со всеми входными нейронами.\n","\n","Во второй части вы попробовали создать свою первую модель нейронной сети. Подгрузили в ноутбук основу **Sequential**, которая отвечает за построение модели, и создали начальную модель: `model = Sequential()`. Но она выглядела как пустая коробка, в которую необходимо что-то положить. И первым стал слой **Dense** (полносвязный слой). Так появилась модель, но ее еще нужно было обучить, и для этого вы указали оптимизатор и функцию потерь при помощи метода `.compile()`. Завершили все это вызовом метода `.summary()`, посмотрев, как выглядит структура НС.\n","\n","Затем вы перешли к практике и решили первую задачу по распознаванию рукописных цифр. Для этого импортировали все необходимые инструменты и загрузили данные **MNIST**. Определили форму массива данных и представление данных в виде картинки. Преобразовали данные для модели НС, превратив картинку **28x28** пикселов в последовательность из **784** чисел. Не оставили без внимания и метки классов. Чтобы сеть лучше классифицировала, перевели метки в формат **one hot encoding**. По изученной схеме создали НС и приступили к ее обучению. В завершение проверили, как обученная НС распознает отдельные изображения рукописных цифр из набора, на котором сеть не обучалась.\n","\n","Итак, вы вспомнили все, что прошли в этом ноутбукe.\n","\n","Поздравляем с первым шагом на пути изучения и применения нейронных сетей!\n"]},{"cell_type":"markdown","metadata":{"id":"wclLlFiT30U7"},"source":["Небольшой практический задачник для закрепления пройденного материала:\n","\n","\n","---\n","\n","[УИИ **Задачник** к теме \"Введение в нейронные сети. Линейный слой (Dense)\"](https://colab.research.google.com/drive/1MJBbsHrYLlMp9aXNDRHnAGH-zPAbcWhI?usp=sharing)\n","\n","---\n","\n"]},{"cell_type":"markdown","metadata":{"id":"e5VRwRRiY09d"},"source":["**Содержание**:\n","\n","1. [Теория](https://colab.research.google.com/drive/1JB-gsHHDtvQuBynmN02ppUow34XTYQcE?usp=sharing)\n","2. Практический ноутбук"]}]}