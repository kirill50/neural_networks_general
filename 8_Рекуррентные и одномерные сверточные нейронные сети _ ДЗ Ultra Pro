{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Рекуррентные и одномерные сверточные нейронные сети | ДЗ Ultra Pro","provenance":[{"file_id":"1QE0GWhJraG2c08dgBliM6Dx9aONdUa5T","timestamp":1645340775556}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"bA9aVxQQhaZ7"},"source":["Каждый из нас писал в школе и университете изложения, сочинения, рефераты. А значит, в каждом из нас живет великий русский писатель.\n","В этой работе будем раскрывать свои таланты, находить себя в ряду таких гениев, как Пушкин, Гоголь, Грибоедов\n","\n","В этой работе \n","- скачаем корпус текстов 20-ми русских писателей. Каждый текст разобьем на обучающую и тестовую выборки.\n","- разработаем и обучим нейронную сеть определяющию авторство фрагментов текста (по тестовой выборке)\n","- скачаем СВОЕ сочинение (или чье-нибудь - есть в архиве). Сделаем из него проверочную выборку\n","- предложим нейронке предсказать автора сочинения (по проверочной выборке)\n","- объявим себя великим писателем, например, Гончаровым \n","\n","Ссылка на архив: https://storage.googleapis.com/datasets_ai/Data/writers25.zip\n","\n","В работе рекомендуется пользоваться материалами из ноутбука практического занятия \"Рекуррентные и одномерные сверточные нейронные сети\". Допускается выбрать лучший вариант нейронки и адаптировать ее структуру, параметры обучения и формирования датасетов под свои *нужды*"]},{"cell_type":"code","source":["import numpy as np  # Работа с массивами данных\n","\n","import tensorflow as tf\n","# Функции-утилиты для работы с категориальными данными\n","from tensorflow.keras import utils\n","# Класс для конструирования последовательной модели нейронной сети\n","from tensorflow.keras.models import Sequential\n","# Основные слои\n","from tensorflow.keras.layers import Dense, Dropout, SpatialDropout1D, BatchNormalization, LSTM, MaxPooling1D\n","from tensorflow.keras.layers import Embedding, Flatten, Activation, Conv1D, GlobalMaxPooling1D, Bidirectional\n","# Токенизатор для преобразование текстов в последовательности\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.model_selection import train_test_split\n","import re     # Регулярные выражения\n","# Заполнение последовательностей до определенной длины\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","\n","from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay # Матрица ошибок классификатора\n","\n","import os    # Функции операционной системы\n","import zipfile\n","import time   # Работа со временем\n","import pickle # Запись в файлы и чтение из файлов структур данных Python\n","import codecs\n","\n","import matplotlib.pyplot as plt # Отрисовка графиков\n","%matplotlib inline"],"metadata":{"id":"S9KZ48RXMAVa","executionInfo":{"status":"ok","timestamp":1645383733519,"user_tz":-180,"elapsed":6,"user":{"displayName":"Kirill Volkov","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09167675469754145494"}}},"execution_count":69,"outputs":[]},{"cell_type":"code","metadata":{"id":"8A_5iVkYhZ1W","colab":{"base_uri":"https://localhost:8080/","height":105},"executionInfo":{"status":"ok","timestamp":1645372470417,"user_tz":-180,"elapsed":567,"user":{"displayName":"Kirill Volkov","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09167675469754145494"}},"outputId":"5edf217f-1664-42c8-87a2-a415c1b828a6"},"source":["import gdown                                      \n","\n","path = 'https://storage.googleapis.com/datasets_ai/Data/writers25.zip' \n","gdown.download(path, quiet=False) "],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["Downloading...\n","From: https://storage.googleapis.com/datasets_ai/Data/writers25.zip\n","To: /content/writers25.zip\n","100%|██████████| 23.6M/23.6M [00:00<00:00, 117MB/s] \n"]},{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'writers25.zip'"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["#extract the archive to local folder\n","!unzip -qo writers25.zip -d ./  "],"metadata":{"id":"IAlT1NGvNmsY","executionInfo":{"status":"ok","timestamp":1645372758832,"user_tz":-180,"elapsed":794,"user":{"displayName":"Kirill Volkov","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09167675469754145494"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["# split text on train and test dataset\n","def split_text(s):\n","  \"\"\" Partitions text into three parts\n","      in proportion 80%, 20%\"\"\"\n","\n","  i1 = int(0.8*len(s))  # first part from 0 to i1\n","\n","  # Use isalpha() to check when we are at a punctuation\n","  # i.e. . or ; or , or ? \" or ' etc.\n","  # Find nearest alphanumeric boundary\n","  # backup as long as we are in an alphanumeric\n","  while s[i1].isalpha() and i1 > 0:\n","    i1 -= 1\n","\n","  # Returns the three parts\n","  return s[:i1], s[i1:]"],"metadata":{"id":"FT6N9JvzWwsJ","executionInfo":{"status":"ok","timestamp":1645374020170,"user_tz":-180,"elapsed":323,"user":{"displayName":"Kirill Volkov","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09167675469754145494"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["CLASS_LIST = []\n","text_train = []\n","text_test = []\n","\n","for subdir, dirs, files in os.walk('./rec_1d/writters/'):\n","    for file in files:\n","        class_name = re.match('(.+)(?=(\\.txt))', file)[0]\n","        #print(class_name)\n","\n","        if class_name not in CLASS_LIST:\n","                print(f'Добавление класса \"{class_name}\"')\n","                CLASS_LIST.append(class_name)\n","                text_train.append('')\n","                text_test.append('')\n","        # Поиск индекса класса для добавления содержимого файла в \\выборку\n","        cls = CLASS_LIST.index(class_name)\n","\n","        with open(f'{subdir}/{file}', 'r', encoding = \"windows-1251\") as f:\n","            text = f.read()\n","        \n","        text_train[cls] += ' ' + split_text(text)[0].replace('\\n', ' ')\n","        text_test[cls] += ' ' + split_text(text)[1].replace('\\n', ' ')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1S-5EtTyO-EE","executionInfo":{"status":"ok","timestamp":1645374022121,"user_tz":-180,"elapsed":939,"user":{"displayName":"Kirill Volkov","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09167675469754145494"}},"outputId":"4ed81fdd-3f79-45b8-8bbe-96b53ee1f773"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Добавление класса \"Лесков\"\n","Добавление класса \"Тургенев\"\n","Добавление класса \"Катаев\"\n","Добавление класса \"Васильев\"\n","Добавление класса \"Гоголь\"\n","Добавление класса \"Грибоедов\"\n","Добавление класса \"Беляев\"\n","Добавление класса \"Пастернак\"\n","Добавление класса \"Шолохов\"\n","Добавление класса \"Пушкин\"\n","Добавление класса \"Горький\"\n","Добавление класса \"Куприн\"\n","Добавление класса \"Носов\"\n","Добавление класса \"Булгаков\"\n","Добавление класса \"Каверин\"\n","Добавление класса \"Чехов\"\n","Добавление класса \"Толстой\"\n","Добавление класса \"Лермонтов\"\n","Добавление класса \"Достоевский\"\n","Добавление класса \"Гончаров\"\n"]}]},{"cell_type":"code","source":["CLASS_COUNT = len(CLASS_LIST)"],"metadata":{"id":"nvPFECXpWW9f","executionInfo":{"status":"ok","timestamp":1645374031172,"user_tz":-180,"elapsed":279,"user":{"displayName":"Kirill Volkov","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09167675469754145494"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["print(f\"{len(text_train)} texts' samples of {CLASS_COUNT} authors\")\n","print(f\"Class label's example: {CLASS_LIST[0]}\")\n","print(f\"  Text:{text_train[0][:200]}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"puAodLI_1BwP","executionInfo":{"status":"ok","timestamp":1645374032521,"user_tz":-180,"elapsed":3,"user":{"displayName":"Kirill Volkov","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09167675469754145494"}},"outputId":"f9c3e3ec-7f54-4dff-bf9f-f17a7f17c816"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["20 texts' samples of 20 authors\n","Class label's example: Лесков\n","  Text: РАЗБОЙНИК Ехали мы к Макарью на ярмарку*. Тарантас был огромный, тамбовский. Сидело нас пятеро: я, купец из Нижнего Ломова*, приказчик одного астраханского торгового дома, два молодца, состоящие при \n"]}]},{"cell_type":"code","source":["# data distribution\n","def data_summary(df, class_labels):\n","    for i, cls in enumerate(class_labels):\n","        print(f'Количество слов в классе {cls}:\\\n","               {len([word for word in df[i].split()])}') \n","\n","data_summary(text_train, CLASS_LIST)"],"metadata":{"id":"0-QSrTXm1Gdx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1645374034767,"user_tz":-180,"elapsed":1790,"user":{"displayName":"Kirill Volkov","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09167675469754145494"}},"outputId":"618429d6-604a-4d3e-ee57-d0277186bdcc"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Количество слов в классе Лесков:               283077\n","Количество слов в классе Тургенев:               255117\n","Количество слов в классе Катаев:               313549\n","Количество слов в классе Васильев:               373447\n","Количество слов в классе Гоголь:               249105\n","Количество слов в классе Грибоедов:               123221\n","Количество слов в классе Беляев:               277294\n","Количество слов в классе Пастернак:               378043\n","Количество слов в классе Шолохов:               411991\n","Количество слов в классе Пушкин:               411685\n","Количество слов в классе Горький:               339676\n","Количество слов в классе Куприн:               288079\n","Количество слов в классе Носов:               308209\n","Количество слов в классе Булгаков:               246623\n","Количество слов в классе Каверин:               249739\n","Количество слов в классе Чехов:               853277\n","Количество слов в классе Толстой:               431004\n","Количество слов в классе Лермонтов:               253412\n","Количество слов в классе Достоевский:               663163\n","Количество слов в классе Гончаров:               407343\n"]}]},{"cell_type":"code","source":["# Задание параметров преобразования\n","VOCAB_SIZE = 20000                        # Объем словаря для токенизатора\n","WIN_SIZE   = 2000                         # Длина отрезка текста (окна) в словах\n","WIN_HOP    = 200                          # Шаг окна разбиения текста на векторы"],"metadata":{"id":"am3ujzBY4fHf","executionInfo":{"status":"ok","timestamp":1645374034768,"user_tz":-180,"elapsed":5,"user":{"displayName":"Kirill Volkov","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09167675469754145494"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["# Токенизация и построение частотного словаря по обучающим текстам\n","# Используется встроенный в Keras токенизатор для разбиения текста и построения частотного словаря\n","tokenizer = Tokenizer(num_words=VOCAB_SIZE,\n","                      filters='!\"#$%&()*+,-–—./…:;<=>?@[\\\\]^_`{|}~«»\\t\\n\\xa0\\ufeff',\n","                      lower=True,\n","                      split=' ',\n","                      oov_token='неизвестное_слово',\n","                      char_level=False)\n","\n","# Использованы параметры:\n","# num_words   - объем словаря\n","# filters     - убираемые из текста ненужные символы\n","# lower       - приведение слов к нижнему регистру\n","# split       - разделитель слов\n","# char_level  - указание разделять по словам, а не по единичным символам\n","# oov_token   - токен для слов, которые не вошли в словарь\n","\n","# Построение частотного словаря по обучающим текстам\n","tokenizer.fit_on_texts(text_train)\n","\n","# Построение словаря в виде пар слово - индекс\n","items = list(tokenizer.word_index.items())"],"metadata":{"id":"Sv7udmh04i8C","executionInfo":{"status":"ok","timestamp":1645374052555,"user_tz":-180,"elapsed":17790,"user":{"displayName":"Kirill Volkov","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09167675469754145494"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["# Вывод нескольких наиболее часто встречающихся слов\n","print(items[:120])\n","\n","# Размер словаря может быть больше, чем num_words, но при преобразовании в последовательности\n","# и векторы bag of words будут учтены только первые num_words слов\n","print(\"Размер словаря\", len(items))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HUVNY4hx4lIS","executionInfo":{"status":"ok","timestamp":1645374052556,"user_tz":-180,"elapsed":15,"user":{"displayName":"Kirill Volkov","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09167675469754145494"}},"outputId":"e75f6716-41fa-4128-b548-4b960bd4a3a4"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["[('неизвестное_слово', 1), ('и', 2), ('в', 3), ('не', 4), ('на', 5), ('что', 6), ('с', 7), ('я', 8), ('он', 9), ('а', 10), ('как', 11), ('то', 12), ('его', 13), ('к', 14), ('но', 15), ('это', 16), ('по', 17), ('за', 18), ('у', 19), ('она', 20), ('все', 21), ('из', 22), ('так', 23), ('же', 24), ('от', 25), ('ты', 26), ('было', 27), ('вы', 28), ('да', 29), ('мне', 30), ('о', 31), ('меня', 32), ('ее', 33), ('бы', 34), ('только', 35), ('был', 36), ('ему', 37), ('еще', 38), ('когда', 39), ('вот', 40), ('сказал', 41), ('мы', 42), ('они', 43), ('ни', 44), ('до', 45), ('уже', 46), ('их', 47), ('нет', 48), ('ну', 49), ('для', 50), ('него', 51), ('или', 52), ('если', 53), ('ли', 54), ('теперь', 55), ('под', 56), ('быть', 57), ('вас', 58), ('себя', 59), ('где', 60), ('была', 61), ('очень', 62), ('во', 63), ('даже', 64), ('есть', 65), ('вам', 66), ('ничего', 67), ('со', 68), ('чем', 69), ('были', 70), ('может', 71), ('тут', 72), ('кто', 73), ('чтобы', 74), ('себе', 75), ('потом', 76), ('всё', 77), ('время', 78), ('без', 79), ('там', 80), ('ей', 81), ('раз', 82), ('человек', 83), ('этого', 84), ('тебя', 85), ('нибудь', 86), ('нас', 87), ('будет', 88), ('тебе', 89), ('вдруг', 90), ('уж', 91), ('того', 92), ('глаза', 93), ('ним', 94), ('ведь', 95), ('этот', 96), ('один', 97), ('надо', 98), ('потому', 99), ('ней', 100), ('через', 101), ('сам', 102), ('перед', 103), ('них', 104), ('опять', 105), ('при', 106), ('мой', 107), ('после', 108), ('тем', 109), ('дело', 110), ('чего', 111), ('всех', 112), ('здесь', 113), ('какой', 114), ('спросил', 115), ('который', 116), ('над', 117), ('будто', 118), ('своей', 119), ('чтоб', 120)]\n","Размер словаря 318191\n"]}]},{"cell_type":"code","source":["# Преобразование входных текстов в последовательности индексов (для архитектур с embedding)\n","# Применено приведение к массиву объектов для дальнейшего разделения на выборки\n","seq_train = np.array(tokenizer.texts_to_sequences(text_train))\n","seq_test = np.array(tokenizer.texts_to_sequences(text_test))\n","# Вывод формы и примера данных\n","print(seq_train.shape) \n","print(seq_train[0][:20])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FWOce1wB4p4G","executionInfo":{"status":"ok","timestamp":1645374067287,"user_tz":-180,"elapsed":14737,"user":{"displayName":"Kirill Volkov","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09167675469754145494"}},"outputId":"c2416889-31c5-4023-c679-df160978ab6c"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:3: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  This is separate from the ipykernel package so we can avoid doing imports until\n"]},{"output_type":"stream","name":"stdout","text":["(20,)\n","[4879, 2197, 42, 14, 1, 5, 19221, 8145, 36, 3013, 1, 11771, 87, 11772, 8, 2697, 22, 15730, 1, 4128]\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  after removing the cwd from sys.path.\n"]}]},{"cell_type":"code","source":["# Функция разбиения последовательности на отрезки скользящим окном\n","# На входе - последовательность индексов, размер окна, шаг окна\n","def split_sequence(sequence, win_size, hop):\n","    # Последовательность разбивается на части до последнего полного окна\n","    return [sequence[i:i + win_size] for i in range(0, len(sequence) - win_size + 1, hop)]\n","\n","\n","# Функция формирования выборок из последовательностей индексов\n","# формирует выборку отрезков и соответствующих им меток классов в виде one hot encoding\n","def vectorize_sequence(seq_list, win_size, hop):\n","    # В списке последовательности следуют в порядке их классов\n","    # Всего последовательностей в списке ровно столько, сколько классов\n","    class_count = len(seq_list)\n","\n","    # Списки для исходных векторов и категориальных меток класса\n","    x, y = [], []\n","\n","    # Для каждого класса:\n","    for cls in range(class_count):\n","        # Разбиение последовательности класса cls на отрезки\n","        vectors = split_sequence(seq_list[cls], win_size, hop)\n","        # Добавление отрезков в выборку\n","        x += vectors\n","        # Для всех отрезков класса cls добавление меток класса в виде OHE\n","        y += [utils.to_categorical(cls, class_count)] * len(vectors)\n","\n","    # Возврат результатов как numpy-массивов\n","    return np.array(x), np.array(y)"],"metadata":{"id":"fZLYfUN64urq","executionInfo":{"status":"ok","timestamp":1645374067288,"user_tz":-180,"elapsed":8,"user":{"displayName":"Kirill Volkov","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09167675469754145494"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["    # Формирование обучающей выборки\n","    x_train, y_train = vectorize_sequence(seq_train, WIN_SIZE, WIN_HOP) \n","    # Формирование тестовой выборки\n","    x_test, y_test = vectorize_sequence(seq_test, WIN_SIZE, WIN_HOP)\n","\n","    # Проверка формы сформированных данных\n","    print(x_train.shape, y_train.shape)\n","    print(x_test.shape, y_test.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3Z0-JspC40T9","executionInfo":{"status":"ok","timestamp":1645374076694,"user_tz":-180,"elapsed":9411,"user":{"displayName":"Kirill Volkov","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09167675469754145494"}},"outputId":"9c4a017b-bf68-45c0-d31b-d47b951e56d4"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["(34447, 2000) (34447, 20)\n","(8517, 2000) (8517, 20)\n"]}]},{"cell_type":"code","source":["# Формирование выборок текстов в виде разреженных матриц (bag of words)\n","\n","# На входе .sequences_to_matrix() ожидает список, .tolist() выполняет преобразование типа\n","x_train_01 = tokenizer.sequences_to_matrix(x_train.tolist())\n","x_test_01 = tokenizer.sequences_to_matrix(x_test.tolist())\n","\n","# Вывод формы обучающей выборки в виде разреженной матрицы Bag of Words\n","print(x_train_01.shape)       \n","# Вывод фрагмента отрезка обучающего текста в виде Bag of Words\n","print(x_train_01[0][0:100]) "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"esVF16KS42i-","executionInfo":{"status":"ok","timestamp":1645374120325,"user_tz":-180,"elapsed":43637,"user":{"displayName":"Kirill Volkov","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09167675469754145494"}},"outputId":"f49f20a6-29b1-493a-c10e-1e84a7b878c8"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["(34447, 20000)\n","[0. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 0. 1. 1. 1.\n"," 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.\n"," 1. 1. 0. 1. 0. 1. 1. 1. 1. 1. 1. 0. 1. 1. 1. 0. 1. 1. 1. 1. 1. 0. 1. 0.\n"," 1. 1. 0. 1. 1. 1. 1. 0. 1. 0. 1. 1. 0. 1. 1. 1. 1. 1. 0. 1. 1. 1. 1. 1.\n"," 0. 1. 1. 1.]\n"]}]},{"cell_type":"code","source":["# Функция компиляции и обучения модели нейронной сети\n","def compile_train_model(model, \n","                        x_train,\n","                        y_train,\n","                        x_val,\n","                        y_val,\n","                        optimizer='adam',\n","                        epochs=50,\n","                        batch_size=128,\n","                        figsize=(20, 5)):\n","\n","    # Компиляция модели\n","    model.compile(optimizer=optimizer, \n","                  loss='categorical_crossentropy', \n","                  metrics=['accuracy'])\n","\n","    # Вывод сводки\n","    model.summary()\n","\n","    # Обучение модели с заданными параметрами\n","    history = model.fit(x_train,\n","                        y_train,\n","                        epochs=epochs,\n","                        batch_size=batch_size,\n","                        validation_data=(x_val, y_val))\n","\n","    # Вывод графиков точности и ошибки\n","    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=figsize)\n","    fig.suptitle('График процесса обучения модели')\n","    ax1.plot(history.history['accuracy'], \n","               label='Доля верных ответов на обучающем наборе')\n","    ax1.plot(history.history['val_accuracy'], \n","               label='Доля верных ответов на проверочном наборе')\n","    ax1.xaxis.get_major_locator().set_params(integer=True)\n","    ax1.set_xlabel('Эпоха обучения')\n","    ax1.set_ylabel('Доля верных ответов')\n","    ax1.legend()\n","\n","    ax2.plot(history.history['loss'], \n","               label='Ошибка на обучающем наборе')\n","    ax2.plot(history.history['val_loss'], \n","               label='Ошибка на проверочном наборе')\n","    ax2.xaxis.get_major_locator().set_params(integer=True)\n","    ax2.set_xlabel('Эпоха обучения')\n","    ax2.set_ylabel('Ошибка')\n","    ax2.legend()\n","    plt.show()\n","\n","\n","# Функция вывода результатов оценки модели на заданных данных\n","def eval_model(model, x, y_true,\n","               class_labels=[],\n","               cm_round=3,\n","               title='',\n","               figsize=(10, 10)):\n","    # Вычисление предсказания сети\n","    y_pred = model.predict(x)\n","    # Построение матрицы ошибок\n","    cm = confusion_matrix(np.argmax(y_true, axis=1),\n","                          np.argmax(y_pred, axis=1),\n","                          normalize='true')\n","    # Округление значений матрицы ошибок\n","    cm = np.around(cm, cm_round)\n","\n","    # Отрисовка матрицы ошибок\n","    # fig, ax = plt.subplots(figsize=figsize)\n","    # ax.set_title(f'Нейросеть {title}: матрица ошибок нормализованная', fontsize=18)\n","    # disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=class_labels)\n","    # disp.plot(ax=ax)\n","    # plt.gca().images[-1].colorbar.remove()  # Стирание ненужной цветовой шкалы\n","    # plt.xlabel('Предсказанные классы', fontsize=16)\n","    # plt.ylabel('Верные классы', fontsize=16)\n","    # fig.autofmt_xdate(rotation=45)          # Наклон меток горизонтальной оси при необходимости\n","    # plt.show()    \n","\n","    print('-'*100)\n","    print(f'Нейросеть: {title}')\n","\n","    # Для каждого класса:\n","    for cls in range(len(class_labels)):\n","        # Определяется индекс класса с максимальным значением предсказания (уверенности)\n","        cls_pred = np.argmax(cm[cls])\n","        # Формируется сообщение о верности или неверности предсказания\n","        msg = 'ВЕРНО :-)' if cls_pred == cls else 'НЕВЕРНО :-('\n","        # Выводится текстовая информация о предсказанном классе и значении уверенности\n","        print('Класс: {:<20} {:3.0f}% сеть отнесла к классу {:<20} - {}'.format(class_labels[cls],\n","                                                                               100. * cm[cls, cls_pred],\n","                                                                               class_labels[cls_pred],\n","                                                                               msg))\n","\n","    # Средняя точность распознавания определяется как среднее диагональных элементов матрицы ошибок\n","    print('\\nСредняя точность распознавания: {:3.0f}%'.format(100. * cm.diagonal().mean()))\n","\n","\n","# Совместная функция обучения и оценки модели нейронной сети\n","def compile_train_eval_model(model, \n","                             x_train,\n","                             y_train,\n","                             x_test,\n","                             y_test,\n","                             class_labels=CLASS_LIST,\n","                             title='',\n","                             optimizer='adam',\n","                             epochs=50,\n","                             batch_size=128,\n","                             graph_size=(20, 5),\n","                             cm_size=(10, 10)):\n","\n","    # Компиляция и обучение модели на заданных параметрах\n","    # В качестве проверочных используются тестовые данные\n","    compile_train_model(model, \n","                        x_train, y_train,\n","                        x_test, y_test,\n","                        optimizer=optimizer,\n","                        epochs=epochs,\n","                        batch_size=batch_size,\n","                        figsize=graph_size)\n","\n","    # Вывод результатов оценки работы модели на тестовых данных\n","    eval_model(model, x_test, y_test, \n","               class_labels=class_labels, \n","               title=title,\n","               figsize=cm_size)"],"metadata":{"id":"hIv4wHg049M7","executionInfo":{"status":"ok","timestamp":1645374120326,"user_tz":-180,"elapsed":10,"user":{"displayName":"Kirill Volkov","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09167675469754145494"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["# Снижение размерности входных данных:\n","# ограничение длины последовательностей до разумного предела\n","seq_max_len = 1000\n","x_train_clip = pad_sequences(x_train, maxlen=seq_max_len)\n","x_test_clip = pad_sequences(x_test, maxlen=seq_max_len)\n","\n","# Проверка формы результата\n","print(x_train_clip.shape, x_test_clip.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aEU-PUqD5DgG","executionInfo":{"status":"ok","timestamp":1645374120721,"user_tz":-180,"elapsed":401,"user":{"displayName":"Kirill Volkov","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09167675469754145494"}},"outputId":"4498735f-a649-4482-8048-12d86faed7c7"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["(34447, 1000) (8517, 1000)\n"]}]},{"cell_type":"code","source":["#Создаём сеть с Embedding слоем\n","model_text_emb_200 = Sequential()\n","model_text_emb_200.add(Embedding(VOCAB_SIZE, 200, input_length=seq_max_len))\n","\n","model_text_emb_200.add(Conv1D(128, 10, padding=\"valid\", activation=\"relu\", strides=3))\n","model_text_emb_200.add(Conv1D(256, 10, padding=\"valid\", activation=\"relu\", strides=3))\n","model_text_emb_200.add(GlobalMaxPooling1D())\n","\n","#model_text_emb_200.add(SpatialDropout1D(0.2))\n","model_text_emb_200.add(Flatten())\n","model_text_emb_200.add(BatchNormalization())\n","model_text_emb_200.add(Dense(200, activation=\"relu\"))\n","model_text_emb_200.add(Dropout(0.3))\n","model_text_emb_200.add(Dense(200, activation=\"relu\"))\n","model_text_emb_200.add(Dropout(0.3))\n","#model_text_emb_200.add(BatchNormalization())\n","model_text_emb_200.add(Dense(CLASS_COUNT, activation='softmax'))\n","\n","compile_train_eval_model(model_text_emb_200,\n","                         x_train_clip, y_train,\n","                         x_test_clip, y_test,\n","                         epochs=10,\n","                         class_labels=CLASS_LIST,\n","                         title='Embedding/20')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"mOHfyDpD71nx","executionInfo":{"status":"ok","timestamp":1645381436268,"user_tz":-180,"elapsed":6666427,"user":{"displayName":"Kirill Volkov","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09167675469754145494"}},"outputId":"8311e88c-e88a-45a8-f09c-77e6760aca34"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding (Embedding)       (None, 1000, 200)         4000000   \n","                                                                 \n"," conv1d (Conv1D)             (None, 331, 128)          256128    \n","                                                                 \n"," conv1d_1 (Conv1D)           (None, 108, 256)          327936    \n","                                                                 \n"," global_max_pooling1d (Globa  (None, 256)              0         \n"," lMaxPooling1D)                                                  \n","                                                                 \n"," flatten (Flatten)           (None, 256)               0         \n","                                                                 \n"," batch_normalization (BatchN  (None, 256)              1024      \n"," ormalization)                                                   \n","                                                                 \n"," dense (Dense)               (None, 200)               51400     \n","                                                                 \n"," dropout (Dropout)           (None, 200)               0         \n","                                                                 \n"," dense_1 (Dense)             (None, 200)               40200     \n","                                                                 \n"," dropout_1 (Dropout)         (None, 200)               0         \n","                                                                 \n"," dense_2 (Dense)             (None, 20)                4020      \n","                                                                 \n","=================================================================\n","Total params: 4,680,708\n","Trainable params: 4,680,196\n","Non-trainable params: 512\n","_________________________________________________________________\n","Epoch 1/10\n","270/270 [==============================] - 663s 2s/step - loss: 1.6868 - accuracy: 0.4597 - val_loss: 2.7384 - val_accuracy: 0.1007\n","Epoch 2/10\n","270/270 [==============================] - 662s 2s/step - loss: 0.1474 - accuracy: 0.9523 - val_loss: 1.5250 - val_accuracy: 0.6384\n","Epoch 3/10\n","270/270 [==============================] - 651s 2s/step - loss: 0.0512 - accuracy: 0.9819 - val_loss: 1.0936 - val_accuracy: 0.7822\n","Epoch 4/10\n","270/270 [==============================] - 673s 2s/step - loss: 0.0347 - accuracy: 0.9866 - val_loss: 1.2212 - val_accuracy: 0.8089\n","Epoch 5/10\n","270/270 [==============================] - 657s 2s/step - loss: 0.0331 - accuracy: 0.9871 - val_loss: 2.1771 - val_accuracy: 0.6928\n","Epoch 6/10\n","270/270 [==============================] - 653s 2s/step - loss: 0.0427 - accuracy: 0.9850 - val_loss: 1.3977 - val_accuracy: 0.7688\n","Epoch 7/10\n","270/270 [==============================] - 682s 3s/step - loss: 0.0375 - accuracy: 0.9857 - val_loss: 1.6398 - val_accuracy: 0.7513\n","Epoch 8/10\n","270/270 [==============================] - 655s 2s/step - loss: 0.0315 - accuracy: 0.9877 - val_loss: 1.5930 - val_accuracy: 0.7645\n","Epoch 9/10\n","270/270 [==============================] - 641s 2s/step - loss: 0.0306 - accuracy: 0.9883 - val_loss: 1.5468 - val_accuracy: 0.7609\n","Epoch 10/10\n","270/270 [==============================] - 646s 2s/step - loss: 0.0209 - accuracy: 0.9907 - val_loss: 1.3305 - val_accuracy: 0.8121\n"]},{"output_type":"display_data","data":{"image/png":"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yCMREREprGJxav8UWcYYD84UvQ9LWuLI5xDOiLPsjvnWiYiISBGQW3FJEREREddZa+93O4bT4Zt2tRNnemFPl8NxhbX22SDLl+Nc8U1ERESKAE1bExERERERERGRoDRtTUREREREREREglLySEREREREREREglLySEREREREREREglLySEREREREREREglLySEREREREREREglLySEREREREREREglLySEREREREREREglLySEREREREREREglLySEREREREREREglLySEREREREREREglLySEREREREREREglLySEREREREREREglLySEREREREREREglLySEREREREREREglLySEREREREREREglLySEREREREREREglLySEREREREREREglLySEREREREREREglLySEREREREREREglLySEREREREREREglLySEREREREREREglLySEREREREREREgirldgAnq2rVqrZevXpuhyEiIiIFJDY2do+1tprbcUhWeg8mIiJSvB3vPViRSx7Vq1ePFStWuB2GiIiIFBBjzF9uxyA56T2YiIhI8Xa892CatiYiIiIiIiIiIkEpeSQiIiIiIiIiIkEpeSQiIiIiIiIiIkEVuZpHIiIiIiIiIhlSU1NJSEggOTnZ7VBEioSwsDBq165NaGhonrcpsOSRMWYa0BvYZa2NzGW9AZ4HegFJwBBr7cqCikdERERERESKn4SEBCpWrEi9evVwPmaKSDDWWvbu3UtCQgL169fP83YFOW1tOtDzOOuvABr5foYDrxRgLCIiIiIiIlIMJScnU6VKFSWORPLAGEOVKlVOeqRegSWPrLXfA/uO0+Rq4B3rWApEGGPOLqh4REREREREpHhS4kgk707l98XNgtm1gK0BjxN8y0RERERERESKjISEBK6++moaNWpEgwYNuOeee0hJScmXvtPT05k4cSIdOnSgVatWvP766/nSb0F544036Ny5M1FRUYwZM8btcAqVLVu2MGjQIKKjo4mMjGTPnj1uh5RnRaJgtjFmOM7UNurWretyNCIiIiIiIiIOay39+vXjjjvuYM6cOaSnpzN8+HD+9a9/MWnSpNPuf8yYMXg8HubPn0/ZsmXzIeKC8+abb7J06VLmzp1LeHi42+EUKsnJyVx//fVMmDCBSy65pMiNlnNz5NE2oE7A49q+ZTlY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vvvuLO3Hjh2L1+v1J486derE0qVLWbVqFddddx0TJ048qf2PHDmS5cuXs3btWo4ePcrcuXNzbTdp0iTi4uKIi4ujQYMG/uW//fYbI0aMYP369VSqVImXX36Z5ORkhgwZwsyZM1mzZg1paWm88sor/m0WLlzIunXr2LlzJ5s2bWLPnj2MHz+eb7/9lpUrVxIVFcWzzz7rbx8eHs6aNWsYOXIko0aNAuCuu+5i8ODBrF69Ost58ng8uSbAgomNjeWtt97i559/ZunSpbz++uusWrUKgIYNGzJ79mwA/ve//1GnTp0895thwoQJrFixgrcxkpcAACAASURBVNWrV/Pdd9+xevVq9u7dy9atW/nPf/7DmjVraNasGU888QQAN910E//5z39YvXp1luUASUlJxMXF8fLLLzNs2DB//926dWPZsmUsXLiQBx980J+QOx0qmF2MzI7bRrrXcm0rTVkTERGRIq5UaWh/J3z9KCSsgNpRbkckIkXBV4/A32vyt8+azeCKp/O3zyC2bdvG0qVL6du3r3+Zx+PhH//4BwCDBg3ioYce8q+bPn0633zzDVu3bvUvS0hIYODAgezYsYOUlBTq16+f675mzpzJkiVL/PuNinL+zi5cuJCJEyeSlJTEvn37aNq0KVdddVWej6FOnTp07NgRgBtvvJEXXniByy67jPr163P++ecDMHjwYF566SV/4qdr167s3buXyMhImjVrxhdffMGvv/7q7yclJYX27dv793H99df7b++9914AfvrpJ2bNmpXjPNWuXZtVq1bRpk2bHLE++OCDjB8/HoBNmzYBsGTJEvr27Uv58uUB6NevH4sXL6ZPnz6UKVOGhg0bsm7dOt59910GDRrE8uXLcz0PkydP5r333gOcBOADDzwAwEcffcTUqVNJS0tjx44d/Prrr7Rr1446depwySWX+M/PgAEDOHjwIAcOHMixPPt5uPjiizl06BAHDhxg3rx5fPbZZ/6RT8nJyWzZsoULL7zwBM/c8WnkUTFhrSUmNoHW51bmvGoV3A5HRERE5PS1GgxhEbBkstuRiIgE1aRJE2JjY7MsO3ToEFu2bKFhw4Yn1dcTTzzB6NGjs1zsqGLFikHb79u3j8mTJ/sTE+CMwBk5ciRr1qzhtddeIzk5OddtBw4c6B85NHDgQMBJNIwYMYKYmBjWrFnDrbfeGnT7YLJfqCkvF25auHAh27Zto0aNGnzwwQdYa7nsssv88f3666+8+eabufZ5ov4fffRR3nzzTVq0aMFjjz2WZV2w0VPHM3ToUCZOnEhaWho1atQI2u7ee+/19925c2fASSI988wzzJ8/n9WrV3PllVeSnJxMpUqV8rTv7HI719ZaPvnkE/++8yNxBEoeFRtrth3k952JKpQtIiJSwhlj6hhjFhpjfjXGrDPG3JNLmy7GmIPGmDjfz2O59eW6MhUg+lbY8AXs+cPtaESkKLjiaRj6Rf7+nGDUUffu3UlKSuKdd94BnFo4999/P0OGDKFcuXJ5Dn3Tpk3Ex8fTo0ePLMvbtGnDhx9+CDj1jzISEQD33XcfI0aMYPv27cybNw+AgwcPUqtWLQDefvvtPO8f8CeKqlatSmJiYpaaQHm1ZcsWfvrpJwDef/99OnXqxAUXXEB8fLx/Gt+7777rH02TwRhDxYoV2bNnD+3ateOHH37wtz9y5Ai///67v+3MmTP9txkjkjp06JDreWrcuDE///wzv/zyC2PHjj1h/J07d2b27NkkJSVx5MgRPv300yznvHXr1uzatctf4+pkHDp0iPLlyxMeHs7OnTv56quvADjrrLMoU6YMixcvznJ+wsPDqVy5co7l2c/DkiVLCA8PJzw8nMsvv5wXX3zRP1UvY8rd6dK0tWIiJjaBMqU8XNn8bLdDEREREXelAfdba1caYyoCscaYb6y1v2Zrt9ha29uF+E5O9G3w44vOldeunuJ2NCIiORhj+PTTTxkxYgTjxo3D6/XSq1cvnnzySX+bWbNmERcXR2JiIps3b6ZTp045+tmwYQNvvfVWjuVTpkzh5ptvZtKkSVSvXp1p06blaPPaa6/Rp08fli9fzpgxYxgwYACVK1emW7dubN68Oc/HEhERwa233kpkZCQ1a9bMdarXiVxwwQW89NJLDBs2jCZNmnDHHXcQFhbGW2+9xYABA0hLS6NNmzbcfvvt/m26du2KMYYaNWrw5JNPEhERwfTp07n++uv9hbXHjx/vn/a2f/9+mjdvTpkyZfjggw8AePHFFxk6dCiTJk2iWrVquZ7LvGjVqhVDhgwhOjoagFtuuYWWLVv6i2kD/qTPySbXWrRoQcuWLWncuHGW6X3gJIbuvPNOUlNTadiwoX+k1dtvv83tt99OUlIS5513XpbjCgsLo2XLlqSmpvpfF6NHj2bUqFE0b94cr9dL/fr1g9atOhnmZApHFQZRUVE2o1K6OI6lpRM9YT6XnF+NF65v6XY4IiIip8UYE2utVYGbfGKMmQNMsdZ+E7CsC/DAySSPXH0P9sX9sPIduGc1VNIXZSKS1fr16/NlWo6cvvj4eHr37s3atWsLbB/16tVjxYoV/ivVlVRdunThmWee8deqOlm5/d4c7z2Ypq0VA/PX7+Lg0VRNWRMREZEsjDH1gJbAz7msbm+M+cUY85UxpukZDexktR8J3jT4+ZUTtxUREZF8p2lrxUBMbAI1K4XRsWHJzryKiIhIJmNMBeATYJS19lC21SuBc621icaYXsBsoFEufQwHhgNZLht9xp1VH5pcAyvegs73Q1i4e7GIiEhQ9erVK9BRR0CW6WMl2aJFi87o/jTyqIjbdSiZ737fTb9WtQjxnLiKvYiIiBR/xphQnMTRDGvtrOzrrbWHrLWJvvtfAqHGmBzfQllrp1pro6y1UdWqVSvwuI+r0yg4dghW5Kz1ISIiIgVLyaMibnbcNtK9lms1ZU1EREQA41y3901gvbX22SBtavraYYyJxnlPuPfMRXkKzm4B53WFpa9A6sldNlpEir+iVstXxE2n8vui5FERZq0lJjaBVnUjaFCtgtvhiIiISOHQERgEdDPGxPl+ehljbjfGZFzapj+w1hjzC/ACcJ0tCp+8Oo2CxJ2w+kO3IxGRQiQsLIy9e/cqgSSSB9Za9u7dS1hY2Eltp5pHRdiabQf5fWciT/Zt5nYoIiIiUkhYa5cAx53Lbq2dAhS9697XvwTOvgh+eAFaDgJPiNsRiUghULt2bRISEti9e7fboYgUCWFhYdSufXKzl5Q8KsI+iU2gTCkPVzbXJWtFRESkBDDGGX308RDYMBeaXO12RCJSCISGhlK/fn23wxAp1jRtrYg6lpbOnF+2c3nTmoSXDXU7HBEREZEz48I+cNZ5sOQ50BQVERGRM0LJoyJqwfpdHEhKpb8KZYuIiEhJ4gmBDnfB9pUQv9jtaEREREoEJY+KqJjYBGpWCqNjwxxX1RUREREp3lr8A8pXgx+edzsSERGREkHJoyJo1+FkFv2+m76tahHiOW49TBEREZHiJzQM2t4OG7+Fv9e4HY2IiEixp+RRETRn1XbSvZZrW2nKmoiIiJRQbW6G0hU0+khEROQMUPKoiLHWEhObQMu6ETSsXsHtcERERETcUbYytB4Ca2fB/r/cjkZERKRYU/KoiFm77RC/7TysQtkiIiIi7e8E44GfprgdiYiISLGm5FERExO7ldKlPPRufo7boYiIiIi4q9I50HwgrHwXjuxxOxoREZFiS8mjIuRYWjpzftnO5U1rEl421O1wRERERNzX8W5IOwrLprodiYiISLGl5FERsmD9Lg4kpWrKmoiIiEiGahfABVc6yaOUI25HIyIiUiwpeVSEfLIygRqVytCpYVW3QxEREREpPDqNgqP7YeU7bkciIiJSLCl5VETsPnyMhb/tpl+r2oR4jNvhiIiIiBQedaKhbgf46SVIT3U7GhERkWJHyaMiYk7cNtK9lmtbacqaiIiISA4d74GDW2HtLLcjERERKXaUPCoCrLV8vCKBlnUjaFi9gtvhiIiIiBQ+jXpAtQvhh+fBWrejERERKVaUPCoC1m0/xG87D6tQtoiIiEgwHo8z+mjXOvjjG7ejERERKVaUPCoCYmITKF3KQ+/m57gdioiIiEjh1aw/VKoNPzzndiQiIiLFipJHhdyxtHRmx22jR5MahJcNdTscERERkcIrJBTa3wl//QBbl7sdjYiISLGh5FEht3DDLg4kpWrKmoiIiEhetLoJwiI0+khERCQfKXlUyMXEJlCjUhk6N6rmdigiIiIihV+ZChA9HDZ8Abt/dzsaERGRYkHJo0Js9+FjLPxtN31b1ibEY9wOR0RERKRoaHsblAqDH593OxIREZFiQcmjQmxO3DbSvZb+rWu5HYqIiIhI0VG+KrS8EX6ZCYe2ux2NiIhIkafkUSFlrSUmNoGL6kTQsHpFt8MRERGBI3thTQx8ege80ArSjrkdkUhw7e8Emw5LX3Y7EhERkSKvVEF2bozpCTwPhABvWGufzra+LvA2EOFr84i19suCjKmoWLf9EBv+Psz4ayLdDkVORXoaHPgL9v0JezfBvk3O7f54qB0Fl42DijXcjlJE5PjSUyFhOWycD5vmw/Y4wDrFiBt0haMH9LdMCq+z6kPTvrBiOnR+AMpGuB2RSP7YtR7KV4fyVdyORERKkAJLHhljQoCXgMuABGC5MeYza+2vAc3+DXxkrX3FGNME+BKoV1AxFSUxsQmULuXhqubnuB2KBONNh4NbfcmhbEmiA3+BNy2zbekKcNZ5UO0CWPcp/P4/uPQJaDUYPBoAKCKFyP6/nETRxvmw+Xs4dgiMB2q3gS7/hIbd4ZyW4AlxO1KRE+t4D6z9BFZMg873uR2NyOnb/xdM7eK8r7x1AYSWdTsiESkhCnLkUTSw0Vr7J4Ax5kPgaiAweWSBSr774YAmpQMpaV7mxG2jR5MahJcLdTucks3rhUPbMpNCgUmi/fGQnpLZNrSc84+8RlNo0gfOagBVGji3FaqD8RU93/MHzL0X5o6C1TOh93NQvbErhyciQsoRiF+SObpo70ZneXgdZ9RGw+5Q/xKN2pCi6ewW0KAbLH0F2o2A0DC3IxI5PV8/CtbCrl9h3mi48hm3IxKREqIgk0e1gK0BjxOAttnajAHmGWPuAsoDl+bWkTFmODAcoG7duvkeaGGzYMMu9iel0r91bbdDKRmshcM7so4cykgS7d8MacmZbUuFQeX6UPV8OL9nZnKoSgOoeHZmguh4qjaCwZ9D3AyY9294tRN0GuUMqdebWhEpaNbCzrWZyaItS51EeKmyUK8TtLkFGnR3/lbl5W+aSGHXcRS80wd++QCihrodjcip27QANsyFbqMhaR8sfclJjjbu5XZkIlICFGjNozy4Hphurf2vMaY98K4xJtJa6w1sZK2dCkwFiIqKsi7EeUbFxCZQvWIZOjeq5nYoxYe1kLgrIDkUkCTa9yekJmW2DSntJIiqNHC+cc+SIDonf6aZGeNcBeb8ns43SN9PgrWzoPdkOO+S0+9fRCTQkT2waaGTLNq0ABJ3OsurN3Uuad6gO9RtrwS2FE/1L3amWv74ArS6SVMupWhKS4GvHnbeo3a4y1kWvxjm3Ann/ACVVOpCRApWQSaPtgF1Ah7X9i0LdDPQE8Ba+5MxJgyoCuwqwLgKtd2Hj7Hwt13c0rk+IR5943tSrHU+IO37M/ckUUpiZltPKahcz0kK1b/YmW6WkSQKr33m3liWrwr9pkKL62Dufc43oy3+AT3GqwiiiJy69FTYuiyzdtGOXwALZc9yCl036O58W13pbLcjFSl4xjijjz4eDOs/h6bXuB2RyMlb9hrs+R2unwmlyjjL+k+D1y6GT2+DQbOVGBWRAlWQyaPlQCNjTH2cpNF1wD+ytdkCdAemG2MuBMKA3QUYU6E3J24b6V5L/1aashZU0r5siaGM281w7GBmOxMCEXWdpFDd9gEjiM6D8LoQ4vbAuwANusGIn5wRSD887xTUvvxJJ6mkaSMikhf7NvuSRQucQtcph52/g3Wioeu/oGE3OPsifbiQkunCq5z3AD88B02u1v9WKVoO/w2L/gONesAFPTOXV20EV0yEz0Y67x9VFF5EClCBfXq21qYZY0YCXwMhwDRr7TpjzFhghbX2M+B+4HVjzL04xbOHWGuL/bS0YKy1xMQm0KJOBI1qVHQ7nMIhNRmWvw47VmcmiZIPBDQwEFHHeUPYPCprkeqIulCqtGuhn7TQstD9MYjsD5/fA7Nvh1/edwpqV2ngdnQiUtgcS3SmLGTULtr3p7M8oi406+8rdH0xhIW7G6dIYeAJcab6zB3lJFc1RVyKkm/HQPox6Pl0znUtb3T+Byyc4PzNrx11xsMTkZKhQIdeWGu/BL7MtuyxgPu/Ah0LMoaiZN32Q2z4+zDjrol0O5TC4cAW+Ogm2L4KKtV2Rgw17Zu1BlHleplDd4uLGk1g2NcQ+xZ8+wS83B4uftC53HBRSoaJSP7yemHnGl+yaIFT6Nqb6lzpsV5naHu7Mx2tSgONqhDJTYvrYeGTzugjJY+kqNjys1PsvdO9uX+ZaIzzRWNCLMQMg9uXQFilnO1ERE5TIZq3IzGxCZQO8dCnuQresXE+fHILeNNg4Ay4sLfbEZ1ZHg+0uRkaX+kUR1w4HtbGOG8Ozm3vdnQicqYk7nYSRRmFro/4ZnbXaAbtR/gKXbcrfkl0kYIQGgbtbof5Y50RzWc3dzsikePzpsNXDzpX9O38QPB2ZSPg2tfhrSvgi/ud+yIi+UzJo0IiJc3LZ79s57KmNQgvF+p2OO7xemHJf2HBBKjWGAa+B1Ubuh2VeyrWhP97G37/2nkz8FZPaD0ELh0DZSu7HJyI5Lu0FNj6c2ah679XO8vLVXFqozXo7hS8rljT3ThFiqqom2HxZKc+TP833Y5G5PhWvetc8KDfG1CmwvHb1m0HlzwCi550pi23uO7MxCgiJYaSR4XEwt92se9ICv1bl+BC2UcPwKe3w+9fOXV/+rwApcu7HVXhcP7lcG5HWPQULH0ZNnwJVzwNTftpesrpOrQDVr4Nf37nJOQq1oAKNaBCdd9tTd/96hrdIQVj7yZnVNHG+U4No5RE54qQddpCt9HOh4CaLZwRiSJyespGQNQQ+Okl6D7amf4uUhgd3e+MkqvbwaljlxcXPwB/LnK+cKzdRjUzRSRfKXlUSMTEJlC9Yhk6N6zqdiju+HsNzBwEB7c6V42IHq6kSHZlKsDlE6DZAKegdswwiPsArnxGb35PlrWw+TtY/iZs+AKsF2q1gv3xsHUpJO3NfbuwCGfEhz+xFPhT3beuhpOE0us3b7xe5yqJR/dn/iTtz/rYpoMn1LlCoicUQkKd5ErGbdB1GY9DAu6fZD8F8TweOwybF8PGb50RRvvjneWV60HzgU6yqF5n1awQKSjtRsDSV+HHKc7/UJHCaOGTzv/AXhPz/r/IEwL9psKrHZ3yD8O+Vr1MEck3Sh4VAnsSj7Fwwy5u7lyfUiEl8JvluA9g7r3Ot4FDvnCG3Upw51wEty6AZVNh/jh4qR10/Se0u9P54CvBHd3vvN5WvAl7N0LZs6D9nRA1FM46L7NdeqpTW+bw35C4CxJ3+m7/zry/dZlzPy055348odkSTNWDJJ2qO1fZKw4Ck0DZkz9H92VLDgU8Tj7gJO+CKV3ReTPsTXOeF2/q8dvnN0+pIEmoUsGTUUHXhWYmKL1pEFreuTJO+5HOlDR9QyxyZlQ6B1oMhFXvQZdHoHwJ/eJOCq+/18LyNyBqGNRsdnLbRtSBPi86F51ZOAEue6JgYhSREkefNAuBOXHbSfNa+rcqYVPW0o7B//7pfJA/txP0n+ZMGZIT84RAuzvgwqvgywfhm8dg9cfQ53mo1drt6AqfbSudUUZrP4G0o1A7GvpOhSZXOwVUswsJdT5cVDpB8XprnVEk2RNLiTvh8E7n9mACbIv1FTq2OfsoE55Lcql6wHS5Gs66smedmWlLXq+T0Dm635lKeqLkj3/9gdyPz3+clZwRWRk/EXWh3FlZl5XN/jjCeS5yi9Gb5iSS0lOzJpayPE47zrpUpxBpsHXpvv4D+8q+Ltd9pDkJxWOHA9qmZd4vX8W5XHiD7s60NH0jLAXAGFMHeAeogfOLOdVa+3y2NgZ4HugFJAFDrLUrz3SsrulwD6yaAT+/Bt3+5XY0Ipmsha8eckY7dz3F12aTq6HVYKe2V4OucF6X/IxQREooJY8KgZjYBFrUDqdRjYpuh3LmHEyAjwbDthXOB6nuYzRq5lSE14br3of1nztvNF7v7kz56/ZvTXlJSXKSRSvehO2rnFEeLQY6xVLz6wo7xjjnOazSiQu7p6dB0p7MBNPhv7ONaNrlxJm4y6l5k2NfIZm1lypkG8WUpU5TTShdzkmMJGebDnbc5M/+zITRcZNA4U5SJyPxU/nc3BM/gYmhsPDck0CnyuMBT2lAiReRINKA+621K40xFYFYY8w31tpfA9pcATTy/bQFXvHdlgzVzneuaLpsKnS858TFiEXOlLWfwF8/QO/Jzv/SU9XzadiyFGbdBnf8oBF2InLa9GndZeu2H2T9jkOMu7qp26GcOX8ucur1pB2DAW9D02vcjqhoMwaa9IHzLnGmsS2b6iSTek2CC3u7Hd2Zt+cPWDEN4mY4yZNqjeGKSU7iKCzcvbhCSjkjiPJylaxjiVlHMQX+HN4Jh3c4V185siv3KVylyvqm0x0nCRQWnjXZU7l+8ORPRnIoLFxJXpEiwFq7A9jhu3/YGLMeqAUEJo+uBt6x1lpgqTEmwhhztm/bkqHjKNgwF1a+A+1HuB2NiPP/f95oOLuFM3LodJQu51xR8PVuMGckXP+B6jGKyGnRpwCXxcQmUDrEw1UtTjA9pjiwFpZMhgXjoEojGPie882f5I+wcKfwZ/OBTkHtmTdA495OAfLwWm5HV7DSU+G3L52paZu/c2rLXHgVtLkFzu1Q9N4slang/JyoBo433Snu7U8u+UY0Je11rlQYbDqYkkAiJYYxph7QEvg526pawNaAxwm+ZVmSR8aY4cBwgLp16xZUmO6o08a5ktVPL0H0rfk7QlLkVCz+LxzeDgOmOyUKTlfNZnDZOPjfw7DsdWg7/PT7FJESS58eXJSS5mVO3HYua1KDiHLFfPpF8kGYPcL5hq9pX+gzRUPEC0qdNnDbd/DTFFj0H3iprXM54ja35M8bkcLk0HaIfRtWvu2Mxgmv41zavNVNzhSu4s4TMJWNkyyoKSLFnjGmAvAJMMpae+hU+rDWTgWmAkRFRR1nOGMR1WkUvP9/sCYGLrre7WikJNu7yXnv1vw6qJuPM0jb3gabFsC8fztfqNWMzL++RaREOWH1VWPMQGNMjDGmuzFmgzFmlzHmxjMRXHG38Ldd7DuSQv/WxbxQ9s51MLUr/PYVXP4U9H9LiaOCFhIKne6FET85yaSvHoI3LoUdq92O7PR5vbBpIcy8ESZHwnf/gRpN4foP4Z5f4OIHSkbiSETkOIwxoTiJoxnW2lm5NNkG1Al4XNu3rGRp1AOqN3EKC9vilxuTIuR//4SQMvl/dTRj4JqXnXqFn9zs1IQUETkFebl0zzjgQ5w3IL2B5sA/CzKokiImNoFqFcvQuVExLmC3+mMnaZGSCEPmOjUFitoUoqLsrPpw4yy49k04uBWmdnG+eUo54nZkJ+/ofmdqwZQoePcaiP8BOoyEu1fBjZ/ABVcUv5FVIiKnwHcltTeB9dbaZ4M0+wy4yTjaAQdLVL2jDMY4BbN3r4c/5rkdjZRUv38Nf3wNlzyUt9qIJ6t8Vej7KuzeAF8/mv/9i0iJkJdpa0estTHGmNHW2o0AxphjBRxXsbc38RgLN+zi5k71KRVyBi6/faalpThJimWvQd32ztztgvhnKCdmDDTrDw26wbePw48vwq9z4MpnodFlbkd3YttiYfk0WBvjFIGu0xYuedi5DG1omNvRiYgURh2BQcAaY0ycb9mjQF0Aa+2rwJdAL2AjkAQMdSHOwiHyWlgwHpY8B+df7nY0UtKkHYP/PeLUA217e8Htp0E36HA3/PiCc79Jn4Lbl4gUS3lJHtUyxrwAnO27NTgFFeU0zInbTprXcm1xnLJ2aDt8NBgSlkG7O53htypC6b5yZ0GfF5259HNHwYz+0LSfcynXijXcji6rlCTnUrXL34AdcRBaHlpcD21udoo/iohIUNbaJTjv147XxgJ3npmICrmQUGh/p/MBfusyqBPtdkRSkvw0Bfb96YwUL1XANVC7jYb4xfDZXVCrFYQXw88hIlJg8jLk5UEgNuB2BfBQQQZVEsTEJtCidjjn16jodij5a/NieO1ip85R/7eg55NKHBU29TrC7Uugy6NOAfOX2sCKt5xaQm7b8wd89Qg82xg+G+l8G9frGbh/A1z1nBJHIiJSMFrd5FyNcslzbkciJcnBbfD9M3DBldCwe8Hvr1Rpp5RBeirMus25aquISB6dcOSRtfZtY0xpIOOa6r9Za1MLNqzibd32g/y64xDjrm7qdij5x1pnOtS3Y+Cs82DwXKje2O2oJJhSZaDLwxDZD+be64xE+uVDuOr5M/+8pafChi9gxZuw+XvwhDpDqaNudq4KohpZIiJS0EqXh+jhzkUYdv8G1S5wOyIpCb55zEngXD7hzO2zSgO48hmYfQcsfhYuefDM7VtEirS8XG2tC/AH8BLwMvC7MebiAo6rWPskdhulQzxc1eIct0PJH8mH4KOb4JvR0PhKuHWBEkdFRdVGMPhzuPol2PMbvNrJqfuQmlzw+z64DRY+6Vwx7ePBsG+zM5z6vl+h/zRnhJQSRyIicqZED4dSZeGHF9yOREqC+B+ceo4d73EucHImtbgeIvvDoqecqZoiInmQl5pH/wV6WGt/AzDGnA98ALQuyMCKq5Q0L7PjtnFZkxpElCvgec1nwq4NziXT9/0Jl42DDnfpA39RYwy0vBHO7wlf/wu+n+TUG+r9HJx3Sf7uy+uFzYtg+Zvw21dgvdDwUmjzvFO8W1dLExERt5Sv6vw/jJ0OXR+FcJX4lAKSngZfPQThdaDTvWd+/8ZA72chYTl8crNTziAs/MzHISJFSl5qHoVmJI4ArLW/Aypic4oW/baLfUdSuLZ1MXhDsvYTeL0bJB+Am+ZAx7uVOCrKyleFfq/BoNnONMR3+sCnt8ORvaffd9I++HEKTImCd/vClp+cROPdq+DGGLigpxJHIiLivg4jnS82lr7sdiRSnMW+BTvXQo/xULqcOzGEhTv1UMMMAgAAIABJREFUjw5uc0oYWOtOHCJSZORl5NEKY8wbwHu+xzfgFM2WUxATm0DVCmW4uFE1t0M5dempzhztpS87l00fMB0qFZMpeAINusKIn5wRSD88D79/7czFb3H9ySUHrYVtK51aRms/gbT/Z+++46sszz+Of64MZhgCYSUsAVkBkjAVWYoKiiDBWgfuWYuzpWprXa3tzzpqW9sqFVdrXSQsxQ3iRiCssARRIWEFkD2y7t8fT7QRQQ6Qk/uc5Pt+vZ7XyXnOk5NvMODJde7ruvcFPy+DbofOI4O5SyIiIpHkuNbQZVSw+mjAL4Mh2iLlafeWYERAmwHB6yGfWvQKVtnN+B20PRXSLvKbR0QiWigrj34GLAVuLD2Wlp6TI7Rl135mLN9ERnoScbGh/NFHoJ0b4Nmzg8JR72uDwdgqHFU+8TXh1Lvg2g+CuUiTfxasRNryxeE/t2APZD8H4wfCk6fAksmQeiFc9xFc+RZ0O0+FIxERiVz9boKCXTD3Kd9JpDKacR/s3wnD/hQZK/ZPvgVa94fp42DzKt9pRCSChVLBuNQ594hzLqP0+LNzbn/Yk1VCUxaso6jEMTo92XeUo/P1x/DEAFi/EDKehDP/FGz5KZVXk85w+Rtw1iOwbiH840SY9SAUFfzw2vzP4fXb4eGOMPWGYIXamQ/BL5bD8D9D05SKzy8iInKkmnULVmF8+njFbCAhVce6+TDvWehzLTTu5DtNICYWMsYHr+kzrzj4azwREUIrHl0X9hRVxMR5uXRLrkeHpnV8RzkyzsEnf4dnhkO1BLjqXej2E9+ppKLExECvK2HsZ9BhGMz8fbAr29efBAWiJZODn42/94I5TwaDry9/HX72MfS+GmrU9f0diIiIHJmTb4bdm2Dhf30nkcqipASm/yqYMTnodt9pvq9u82Dn3fUL4d17facRkQgVysyj+maWceBJ51xWGPJUWkvX7WDp+h3cN7KL7yhHZv8umDoWlkyCjsPhnH9oN4aqqk5TOO/ZYAbSa7+Ap4dCrYawZwvUaxm0uaVdDAmNfScVERE5Nq37Q/N0+PhvkH6pNnWQY7foJcj9LCjSROJr6Y5nQc8r4ZPHgvmX7Yb4TiQiESaU4lE9YDhQtinXASoeHYHM7FyqxcZwdrcomg+U/zm8NAa2rIQh90C/myOjN1v8OuEMaNUPPngItq6G7hcGq430wlpERCoLs2D10cuXwLKpwRBtkaO1b0ew2UxSz+B1U6Q64/5gTMWknwUryBOieIMfESl3oRSP1jjnrgh7kkqssLiEyfPzGNK5McfVjpIZQUunwOTrIa4GXDwJjh/kO5FEkuoJQUFRRESksuo4HBq0hQ8fhc7n6A00OXqzHoDd+XDhi8E4gEgVXxPOnQDjBwebpVz4cmTnFZEKFcq/BkvCnqKSe29FPlt2F3BujygYlF1cBG/dGbzTltgRrp2lwpGIiIhUPTGxcNINsH4BfDnLdxqJVvmfw+zHIW0MJPXwnebwmnQJViCtejvILSJS6rDFI+fcGDNrZWZDAMyspplF2cRnvybOW0ujhOoMaB/hSz93bYLnRgb9/b2ugsunQ70oKHiJiIiIhEP3C6B242D1kciRcg7euA3ia8Opd/tOE7peV0GHM+Gdu4Mh2iIihFA8MrOrgYnAE6WnkoHJ4QxVmWzZtZ93l20iIz2JuNgIXva5ZjY8MQDy5sGoJ+CshyGuuu9UIiIiIv7E14C+P4PVM2HdAt9pJNosfw2+mAGD74iu+UFmMOKxYGOUiVdCwW7fiUQkAoRSzfg50A/YAeCcWwloO6UQTV24jqISx+j0CF3B4xzMfgKeOTOYb3TV29D9fN+pRERERCJDzyugWh346C++k0g0KdwLb94BiZ2ClTzRpnZDyBgPW1bBG7f7TiMiESCU4tF+51zBt3fMLI5gtzUJwcR5uXRNqkeHphHY6VewGzKvgtd/Be1Og2veg6ZdfacSERERiRw160PPy2HpZNj6pe80Ei0++itsWwNn/gli432nOTptBsDJt0D2c7BEjSciVV0oxaNZZvZroKaZnQa8AkwLb6zKYem6HSxZtyMyB2VvXgVPDoGcTDjlTjj/v8GLIxERERH5vr7XQ0wcfPKY7yQSDbatgQ8fCXbpazPAd5pjM/jXkNQTpt0I29b6TiMiHoVSPLodyAcWA9cC04E7wxmqssjMziU+1hjRvbnvKN+3bBr8azDs3ABjMmHAOG3DKSIiInIodZtBt5/C/P/ArnzfaSTSvfkbwOD03/tOcuxi42H0k1BSAllXBzszi0iVFMpuayXOuX85534CXAi86JxT29phFBaXMHl+HkM6NeG42tV8xwkUF8Hbd8NLY6BhW7h2FrQ71XcqERERkcjX7yYo2g+fPXH4a6XqWv0eLJsK/X8B9Vv4TlM+GrSB4Y/Amk/gg4d8pxERT0LZbe0WM5trZpcAnwMrzWxc+KNFt1kr8tmyuyByWtZ25cN/RsFHj0KPy+GKN6F+S9+pRERERKJDo/bQ8Sz47F+wf5fvNBKJigth+q/guNZw0g2+05SvbudBt/Nh1gPw9ce+04iIB6HutnYd8BiQDhwPXB7OUJXBxHm5NEqozoATImBbzrVz4IkBsPYzGPkPOPtRiKvuO5WIiIhIdOl3M+zbBtnP+k4ikeiz8bB5BZzxR4iv4TtN+TvrIajfCjKvhr3f+E4jIhUslOLRDufcXOAL59xW59weYF+Yc0W1rbsLeHf5RkalNSc+1uMsIeeCd8eeHhb0K1/5FqRd5C+PiIiISBklJY5r/z2XR9/53HeU0LToBa36wSd/h6KCw18vVceuTfDe/0G7IdBhmO804VG9Dpw7AXZtgGk3Bb9riEiVEUpl43gzmwq0MbOpZjYNaBPmXFFt6oI8Cosdo322rBXsgUnXwfRfQtvBwXyjZt395RERERE5QEyMsa+whFfm5lJSEiW/iPa7GXbkQc5E30kkkrxzDxTuhaEPgJnvNOGT1CPYqXnpFMh+zncaEalAoRSPRgIPl7l9CDgnnKGi3cTsXLom1aNj07p+AuzKhwmnwaKXYNCv4YKXoOZxfrKIiIiI/IiM9CTytu1l9pdbfUcJTfvToHEX+OgvwQ5UIrlzYcHzcOL10Kid7zThd9JNcPwgeON2yI+SVYMicsxCKR4Nds7NOvAIe7IotWz9DnLydvgdlD3nSdi4BC56BQbdBjEeW+dEREREfsTpnZuSUD2OSfNzfUcJjVmw81r+clj5lu804ltJCUwfBwlNYUAV2VMoJgZGPQHxNSHzimAXQhGp9EKpKowIe4pKJHNeLvGxxojuzf0EcA5yMqFN/+CdMREREZEIVrNaLMNSmjJ98Qb2FhT7jhOalAyo1yLYxVaqtgX/gXXZcNp9wUygqqJO02Ajng2Lg5Y9CVagvf9Q8Eb+ksnw1YewaTns3qJVilIpxIVwTWMzu/XAk865R8KQJ6oVFpcweUEep3ZswnG1q/kJsWExbFkJJ4318/VFREREjlBGejKvzMvlraUbGJma5DvO4cXGw4lj4Y3bYM1saNnHdyLxYe82eOdeaNE32Mq+qukwFHpfC5/+A9qeUjXfuC4qgKWTYfbjkDfv0NdZDNRsALUbQe1EqNUw+LhWo9JzZT6u1QhqNYCY2Ir7PkRCEErxKBZIACrx5LfyMWtFPpt3FfhtWcvJhJg46KQFYyIiIhId+rRpQFL9mkyanxcdxSOA9Ith1gPB6qOWL/hOIz6890fYswUuzqrcQ7J/zGn3wdcfBRv1/OxjqNPEd6KKsXMjzHsa5j4FuzZCw/Zw5kPQ9dygoLRnM+zOh92bg5+R3aX392wOViJtWhrc3/vNIb6ABQWkQxWXDjxXswHEhvKrvcjRC+UnbINz7r6wJ6kEJs7LpVFCNQZ2SPQTwDnIyYLjBwf/2IiIiIhEgZgYY1RaEv94bxWbdu6jcZ0aviMdXrXa0PsamPV/QWtK446+E0lF2rgUPvsX9Ly8au9oHF8DRk+A8YNg8nVwUWblnreaNw9mPxH8zlVSCO3PgD7XBr9/lf2+Qy2iFRfB3q0/LC4dWHzatLxMselgO1NasEHSdwWlhqUrnL4tMpXe/25lU0MVm+SIhfIT83bYU1QC3+wu4N3lG7n0xNbEx3r6BzN3LmxfA4N/7efri4iIiBylUelJPDZzFVMXrOOq/sf7jhOa3tcEu659/Fc45x++00hFcQ5e/xXUqAun/NZ3Gv8ad4Shf4BXb4FP/w4n3eA7UfkqKoBlU4PWtNw5UK0O9LoKel8NDdse23PHxkFC4+AIRXFRUEA63MqmzSvh649hz1YOXmwiKDZ9r7jU6CAFpzLFpjhPY1kkYhy2eOSc+5WZdQf6l576wDm3MLyxos/UhesoLHaM9t2yFlsdOp7pL4OIiIjIUWibmED3FvXJzM6LnuJR7YZB+9rcp2Hwb6BelLTcybFZMgm++gDOelir/b/V43L4YkYwA6r1ydA8zXeiY7drU/B3e+5TsGsDNGwHwx6E1Av8DUePjYOExOCg0+GvLykOik3fKy59W3AqU3za8gWs+TRYBeUOMdy7er3g37yDFZfKrnj69n58zXL91sW/wxaPzOxG4Bogq/TUf8xsvHPubyF87lDgLwRzk550zv3fQa45D7iHoCS60Dl3YejxI8fEebmkJNWlU7O6fgKUFAf/I2t/GtSo5yeDiIiIyDEYnZ7EXVOWsGz9Dn+vqY7UiWNhzoRgaPAZ9/tOI+FWsBveuhOadg0KJhIwg7P/Cnknw8Qr4dr3oXqC71RHJy87aE1bkgXFBdDuNOjz92AoeLS15MXE/m8+EiG01pYUB4Pgv7eyqWwrXen9b74OWvj2bIGSooM/V3ztA4pNjQ5yv0wRqlpC1Z0dFiVCaVu7CujjnNsNYGYPAJ8AP1o8MrNY4O/AaUAuMMfMpjrnlpa5pj1wB9DPOfeNmYW4Xi+yLN+wg8V527nn7M7+Qqz5JKiIp4z2l0FERETKjZklArcBnYHvhgA5507xFirMhndrzn3TljJpfl70FI+OawUpGTDvGRjwy6AVRCqvDx6BHXnBnB/thvV9tRpAxnh4ZnjQ1hdNrZzFhbB0SlA0yv0sKGT0uDxoTW3Uzne6ihMTWzovqSEkdjj89c7Bvm0/LC6Vbafbsxl2boCNS4L7xfsP/lyx1Q+xoukQK5xq1FexqYKFUjwyoLjM/WJC23mtN7DKObcawMxeBEYCS8tcczXwd+fcNwDOuU2hhI40mfNyiY81RvjcHSQnM6junnCGvwwiIiJSnp4HXgLOAq4DLgXyvSYKswa1qzG4Y2Mmz8/jtqEdiY2Jkl8M+t0Ei1+BOU/CgHG+00i4bF0dzLfqeh60OtF3msjU+uSgiPr+g8FKna7n+k7043blB4XfuRNg53pocDwMfQBSLwxmWsmPs9JB3TWPA0IosjkHBbv+V1wqW2A6sOC05YvgfsGugz9XTFywy1woBafaicE5FZuOSSjFo6eB2WY2qfT+OcCEED4vCVhb5n4u0OeAa04AMLOPCFrb7nHOvRHCc0eMwuISJs1fx6kdm9CgtqchYt9WyjsMC3b+EBERkcqgoXNugpnd5JybBcwyszm+Q4Xb6PQk3l66kY9WbWbACZ52sD1STbtCuyHBqoUTx2rWR2X1xq8htlqwPb0c2sDbYfWsYIB2ck84rrXvRD+0bkHprmkTg9a0tqcGbXfthkRfa1o0MQvmRVWvAw3ahPY5hXsPKDIduMqp9P76RcHtvu0Hf56G7SFtDHS/IPTd8OR7QhmY/YiZvQecXHrqcufc/HL8+u2BQUAy8L6ZdXXObSt7kZldQzB3iZYtW5bTly4f73+ez+Zd+znX56DsL2cFf6FSMvxlEBERkfJWWHq73szOAtYBh53Oa2ZPAcOBTc65lIM8PgiYAnxZeirLORcxvw0P7tiYejXjycrOjZ7iEUC/m+HZ4bDgv9DrSt9ppLytfBs+fx2G3At1m/lOE9li42D0k/B4f8i8Gi5/PTK2hS8uhGXTgqLR2k+Dro30S4PWtMQTfKeTQ4mvCfWSgyMUxYU/XNG0c0Pw3/6du+Hd+4JunbQx0P50iI0Pb/5KJKS/xc65bCD7CJ87D2hR5n5y6bmycoHZzrlC4Esz+5ygmPS9d9Wcc+OB8QA9e/Y8xF6Dfkycl0ujhGoM7ODxxU1OVjD9vt0QfxlERESkvP3ezOoBvyCYNVkXuCWEz3sGeAx47keu+cA5N/yYE4ZB9bhYhndrRmZ2Lrv2F5FQPQJ+6QxF65MhqQe890do0gVa9vWdSMpLUQG8cXuw21bf632niQ7HtYKz/wwTr4BZ/wen3Okvy+7NQWvanAmwc12wEuqMP0LaRdpoqDKKjYc6TYOjrJPGwuaVMP/fsOAFWDEdajeG7ucHhaRQZjxVceFckzcHaG9mbcysGnA+MPWAayYTrDrCzBoRtLGtDmOmcvXN7gLeWbaRkalJxMd6Wt5YtD+oonYaDnHV/WQQERGRcuece9U5t905l+OcG+yc6wG8FcLnvQ9sDX/C8MlIT2ZfYQmvL17vO0rozGDkP4J2jKfPhI//Fsz3kOj36T9gyyoY+n8Q52lMRTRKGQ2pY+D9h+CrDyv+669fCJN/Do90hhm/C4oDF7wEN2TDidercFQVNWoftJ3euhQueBFa9A7+fv+9Nzx5Gsx7Fvbv9J0yYoWt4uGcKwLGAm8Cy4CXnXNLzOw+MxtRetmbwBYzWwrMBMY557aEK1N5m7pwHYXFzm/L2qp3YP8OtayJiIhUMmZ21wH3h3DA6uxjcKKZLTSz182sSzk9Z7lJb1mf1g1rMWn+gYvWI1zjjnDNe9DxzGA795fGHHr+hkSHHeuD4c8nDIP2p/lOE32GPQAN20LWNbCnAmraxUWwZDI8NQyeGABLJkH6xfDzz+CSydBhqHbJk2B1UodhcP7zcOsyOO13wa5x026Eh06AydfD1x/rDYADHLZ4ZGY/2H++tFf+sJxz051zJzjn2jrn7i89d5dzbmrpx845d6tzrrNzrqtz7sUjzO/VxHm5dGle1+9WsjmZweT4NgP9ZRAREZFwaGpm/zSzRmb2LPArgp1rj1U20Mo5152gHW7yoS40s2vMbK6Zzc3Pr7iN3syMUWnJfLJ6C3nb9lbY1y0XNerBef+G0++Hz9+AJwYGg1wlOr19VzBDZegffCeJTtUTYPQE2LUJpt4Qvl/Gd2+BDx6Bv3SDVy6FHXlwxh+CFSZnPayWJDm0hMbQ78agwHjlO8EOgUunwNPD4G89gp+rHVG0CjaMQll59LKZ3WaBmmb2N+CP4Q4W6VZs2MnivO1+Vx0V7IYVr0PnkRr0JSIiUsk4564nGJK9FvjEOXe6c+6Y2/udczucc7tKP54OxJeODzjYteOdcz2dcz0TEyt2vuOotCScg8nRtvoIgha2k8bCZa9B0T6YcBpk/9t3KjlSX38Ci1+Gk24ItnCXo9M8FYbcDctfhXlPl+9zb1gMU8bCnzvDu/cGbUkXvAg3zocTfw4165fv15PKywxa9IIRf4Nffg7n/DOYm/TuvcHP1/PnwdKpwQy0KiqUCYR9gAeAj4E6wPNAv3CGigaZ2bnExxojU5P8hfj8TSjcE/QTi4iISKViZhnAEuAdYIyZbQJwzmUd4/M2BTY655yZ9SZ4MzHixga0bFiL3q0bkJWdy/WD2mJmviMduZZ94doPIOsqmDoW1nwKZz4I1Wr5TiaHU1IMr4+DusnQ/1bfaaJf35/DFzPgjTug5YnQuNPRP1dxEax4Ldg17euPIL4WpF4Y7Jp2LM8r8q1qtYOfqdQLYcsXMP8/wU6aK9+EWo3+N2S7iv28hbLyqBDYC9QEagBfOudKwpoqwhUVl5CVnccpHRvToLbHoXk5mVCnWfAPsIiIiFQ2Z5cem4GVpR8fdoc0M3sB+AToYGa5ZnalmV1nZteVXnIukGNmC4G/Auc7F5mDHUalJ/FF/m4W50Xx3KCERBiTBQNvgwXPB6uQtnzhO5Uczryng1Utp/8u+EVSjk1MDJzzeDBQfuKVULjvyJ9jz1b48M/wl+7w8iWwfS2c/vugNW34n6vcL/JSQRq2DVbO3bIELnwFWp0Isx+Hf/SFf50Cc5+uMrPtQll5NAeYAvQCGgGPm9lo59xPwposgr2/Mp/Nu/Zzbo8W/kLs2w4r34aeV2jom4iISCXknLv8KD/vgsM8/hjw2FGFqmBndm3G3VOXkJWdR7fkKG4/iYmFwb+G5N6QdXUwB2nkY9DlHN/J5GD2bIUZv4fW/aHLKN9pKo86TYJWoOfPhbd/G6zCC8WGHPjsCVj0ctAG2mYAnPknOEHDr6UCxcbBCacHx+7NsOiloB351ZuDFXWdRwarkVqfHLTAVUKhrDy6snTIdaFzbr1zbiQwNdzBItnEebk0rF2NQR0qtvf/e5ZPh+L9alkTERGpZMzsytLbZDObZGabSo9MM/M4bLHi1asZz2mdm5TucFsJFr63HwLXvh8M733l0uAXjio8PyNizfgd7NsBw/5UaX8J9Kb9aUEL22fjg9mth1JSDMumwTPD4fF+sOiVoFXoZx/DpdOg41kqHIk/tRsFM7Wu/wSumhH8bK6YDs8Oh7+mBTs0bo/CeX2HEUrxaJOZtSx7ALPCHSxSfbO7gHeWbuKctCTiY0P54wuTnEyo1xKSe/rLICIiIuHws9LbpwnesGteekwDnvIVypfR6Uls3V3ArBUVt9tbWNVvAZe/Dn2ug0//Ac+cVSl/yYha6xcGbSi9r4YmP9h0WsrDkLuhabdgO/QDd7HasxU++gv8JRVeGgPffAWn3Re0pp39F2jSxUtkkYMyg+QecPaj8IsVMOoJqJccrFx8NAX+MxqWTIai/b6TlotQ2tZeAxxgB9x2C2OuiDVt0ToKikv87rK2ewusngknjtW7ISIiIpXPfjOrDjRxzpXdmugZM7vZVyhf+rdPpGHtamTNz2VI5ya+45SPuGow7AFo0SfYvvyJ/pDxL2h3qu9kVZtzMP1XUKshDLrDd5rKK646nPsUPDEAJl0LF0+G/OVBa9rCl6Bob9AyOPQPcMKwoF1IJNJVqxWsQOp+PmxdHQzYXvDfYJVpzQbQ7adBW1vTFN9Jj9ph/yY657oCWLDFxRAgHngrzLki1sR5uXRpXpdOzer6C7FsKpQUqWVNRESkcpoM3E6w+nsM8ELp+fOBnd5SeRIfG8OI1OY8/+katu8ppF6teN+Ryk9KBjTtCi9dHLxDPeh2GDBO7Ti+LH4F1n4abNWtLd7Dq1H7oIA69YZg8PDmFRBXA7qdB72vjepfsEVocDyccmdQhP5iJsz/N8x5Emb/E5qnBUWklHOj7t+ZI+m7+jPwa+Aa4LnwxIlsKzbsZFHudr+rjgCWZEHD9sGLDREREalsHgZigTYEr7n2A/nAJcCVHnN5Mzo9mYLiEl5dvM53lPLXqD1c/W7wrvR7fwyGCe/e7DtV1bN/J7z1W2ieDqljfKepGtIuhu4XBCuNhtwDty4LCncqHEllERMbzLo779mgrW3oA1BcCK/9Ah7uAJlXwepZUBIdM/2OZA3gICDdOVdiZp+GKU9Ey8zOJS7GGNG9ub8QOzfAlx8E272qZU1ERKTScc6VAHeVHgJ0aV6X9o0TmJSdx0V9WvmOU/6q1YZRjwdbQE//VdDO85NnoEVv38mqjvcfhF0b4Pzng23lJfzMgp97kaqgdkPoex30uRbWL4D5/wkGwS9+Beq3DIrWqRcGc/Ei1JH8y1hS+mIGoMptC1FUXEJWdh6ndGxMw4Tq/oIsnQK4YJmziIiIVFpmduvBDt+5fDAzMtKTmfv1N3y9ZbfvOOFhBj0ugyvfgpg4eHoYfPrPYA6PhNfmlfDJPyD1Im1GIyLhZRa0rp31MPxyBYyeAMe1gff+AI92hX+PCjbHKtznO+kPHLZ4ZGY7zWwH0M3MdpjZTuDE8EeLLO+vzGfzrv3+W9ZyMqFJSrDFq4iIiFRmvyVoVatzwFElnZPWHDPIyq7kO5M1T4Vr34f2Z8AbtwfDVvft8J2q8nIu+HOOrxm0TomIVJT4mtD1XLh0Kty0KOgu2rwSJl4RtLVN/xWsX+Q75XcOWzxyztVxztV1zsWV3tZxzlWiSYWhmTgvl4a1qzG4Y2N/IbatgbWztepIRESkamgLvA2cCnzknLvXOXev50zeNKtXk35tGzFpfh6usq/GqVk/aJ867T5Y9iqMHwQbcnynqpxWvA6r3gmGlSd4fJ0vIlXbca1g8B1BEeniScHum/OeCXbjfLw/zB4Pe7Z6jRjKyqMBBzsqIlyk2LangHeWbmJkahLxsR57oJdMCm67qHgkIiJS2TnntjrnxhHssvYTM3vDzHr5zuXTqLQk1mzdw7yvv/EdJfzMoN9NcNmrULAbnjwV5j/vO1XlUrgP3rwDEjtC72t8pxERCWautT0Fzn0KfrEcznwoOP/6OHi4Y7Aq6YsZXlqaQxmYPa709mTgw9KPHfB+WBJFoGkL11FQXBIZLWtJPaBBG785REREJOzMbBrBay4AA1oCnxLsxFYlDU1pyp2Tc8jMzqNn6wa+41SMVifBdR8EvzBMuR7WfAJnPhi0O8ix+fhv8M1XcMkUiK1yjRUiEulqNYDeVwfH+oXBGwiLXoItX8C1p1R4nMMWj5xzZwOY2fxvP65qJs7LpXOzunRuXtdfiM2rgh+YM/7gL4OIiIhUpId8B4g0tavHMSylKa8uWsfdZ3emRnwVqaMlNA4KHDP/AB88BOsWBFs/N2zrO1n02rYWPngYOo2A4wf5TiMi8uOadQ+O0+6Dneu8RDiSHqxK3lx+cJ9v3MnC3O3+Vx0tyQIMuozym0NEREQqhHNu1sEO37l8G5WexM59RcxYvsl3lIoVEwun/hYufBm2rw3mIC2b5jtV9HrrzuD2jPv95hARORLxNaDB8V6+dCgzj77dFrZxVdxS09+PAAAgAElEQVQmNnNeLnExxsjU5n6D5GQFy5bres4hIiIiFcLM8s1sU5kj38w2+s7l20ltG9GkbnWysnN9R/HjhDOCNraG7eClMfDmb6C40Heq6LJ6FiydDCffAvVb+k4jIhIVQll59O22sP+iim0TW1RcQtb8PE7p2JiGCdX9Bdm4FPKXaZc1ERGRqqUp0OyA43OviSJAbIxxTloS763IZ8uu/b7j+FG/JVzxBvS6Gj55DJ4ZDjv8tDFEneJCeP224M+w342+04iIRI1QZh7dC2BmdYO7bmfYU0WID1ZuJn/nfv8tazmZYDHQaaTfHCIiIlJhnHPFB54zsyo5RuBAGWnJPDFrNdMWruOyflV0I5G46nDWQ9CyL0y9MdjK+dwJmt9zOHMmBG/K/vR5DR0XETkCobSt9TSzxcAiYLGZLTSzHuGP5t/Eebk0qF2NQR0a+wvhXFA8ajMQEhL95RAREZEKZWYzzWxGmWMm0NV3rkjQoWkdujSvS9b8PN9R/Ot6LlwzE2o1hOfOgVkPQkmJ71SRaVd+MHS87SnQ8SzfaUREokoobWtPAdc751o751oDPweeDmuqCLBtTwFvL93IyNTmVIs7krni5WzdfPjmS0gZ7S+DiIiI+PBLYNwBx1c+A0WSjPRkFuVuZ+XGKrMo/tASO8DVM6DrT2Dm7+G/58Gerb5TRZ5374XC3TD0ATDznUZEJKqEUhUpds598O0d59yHQFH4IkWGaQvXUVBcEhktazHx0Gm43xwiIiJSoZxz8w445gKqlJQa0b05sTGm1Uffqp4AGePhrEfgy1lBG1vuXN+pIkfePJj/H+hzHSSe4DuNiEjUOezMI2CWmT0BvAA44KfAe2aWDuCcyw5jPm8mzsulU7O6dGlez1+IkhJYMgnaDYGax/nLISIiIhXOzP5G8Nrru1OAn/15I1BineoMaN+IyfPzGHd6B2JitJIEM+h1JTRPg1cuhaeGwhl/gN5XV92VNkUFsGERvPYLSGgMA2/znUhEJCqFUjzqXnp79wHn0whe0JxSrokiwMqNO1mYu53fDu/sN8ja2bAjD4bc6zeHiIiI+LAUiC39uAjYC2gpSRkZ6cnc8MJ8Pl29hZPaNfIdJ3IkpcM1s2Dyz+D1cbDmExjxV6heBTZM3rUJ1n4GuZ8Ft3nZULwfsGCgeI26vhOKiESlUHZbG1wRQSLJxOxc4mKMkanN/QZZkgVxNaHDML85REREpMKYWRzwB+AKYE3p6ZYEMyd/7StXJDqtcxPqVI8jMztPxaMD1WoA578AHz0KM34HGxbDec9BE89vjpankmLYtCx4w3XtZ8HtN18Gj8VWg2apwaqrFr2hRR+o09RvXhGRKHbY4pGZNSF4AdPcOTfMzDoDJzrnJoQ9nQdFxSVMys5jcMfGNEqo7i9IcVHQsnbCGUEPu4iIiFQVDwJ1gDbOuZ0AZlYXeKj0sZs9ZosoNeJjOatbM6YuXMfvzulCrWqhLKqvQmJioP+tkNwLJl4B/zoFzn4Uup/vO9nR2bc9mOP0baEody4UlI4Bq904KBL1vCIoFDXrDvE1/OYVEalEQvk/7DME73T9pvT+58BLQKUsHn2wajObdu73Pyj76w9hdz6kZPjNISIiIhVtOHCCc+67eUfOuR1m9jNgOSoefc+otCRenLOWt5Zs5Jy0JN9xIlOb/nDdBzDxSph0bdDGNvSByC6uOAdbV/+vULT2M9i0FHBgMdC4C3Q7LygUtegNx7WuunOdREQqQCjFo0bOuZfN7A4A51yRmRWHOZc3E+fl0qB2NQZ3aOw3SE4mVEuA9qf7zSEiIiIVzZUtHJU5WWxmPzhf1fVq3YDk42qSmZ2r4tGPqdMULpkCM38PH/45mAV03nPQoI3vZIHCvbBufmmxqLRgtGdz8Fj1epDcEzqPDApFST00u0hEpIKFUjzabWYNKd3tw8z6AtvDmsqT7XsKeXvJRi7q25JqcTH+ghQVwNKp0PEsiK/pL4eIiIj4sNTMLnHOPVf2pJmNIVh5JGXExBgZaUk8NnMVG3fso0ndCF5N41tsHAy5J1itM+laeGIgjHocOp5Z8Vl2rPv+rKL1i6CkMHisYbtgdMO3s4oadQha8ERExJtQike3AlOBtmb2EZAInBvWVJ5MXbSOguIS/y1rq2fCvm2QMtpvDhEREfHh50CWmV0BzCs91xOoCYzyliqCjUpP5q8zVjFlQR7XDGjrO07k6zAMrn0fXr4EXrwA+t0Ep9wVFJfCobgQNuZ8vwVt+9rgsbgawUqik8YGhaLkXlBbw89FRCJNKLutZZvZQKADYMAK51xh2JN5MHFeLh2b1qFL83p+g+RkQo36cHyV2+hORESkynPO5QF9zOwUoEvp6enOuXc9xopobRrVJq1lfTLn5XF1/+Mxzb45vONawxVvwZt3wEd/CYZPn/tU+exItmcr5M75X6Eobx4U7gkeq9McWvaBE38erCxq0hXiqh371xQRkbAKZbe1pgTvdr0D3AJcZmZ/c859He5wFWnlxp0sXLuNO8/q5DdI4V5Y/lowKFv/IxUREamynHMzgBm+c0SLjPRkfjs5h6Xrd/h/IzBaxNeA4X+GFn3h1Zvh8f5w7gRoMyD05ygpgS0rSwtFpcWizZ8Hj1ksNOsG6Zf8rwWtnucV/iIiclRCWZuaBWwGfg9MAzYC/wX6hTFXhZuYnUtcjPkftLjybSjYpZY1ERERkSNwdrdm3DdtCVnZeSoeHanuPw2KPC9dDM+NhFPuhH63HHzO0P5dsC67zLyiz4JxCwA1GwQFou4XBLfN06BarYr9XkREJCxCKR7Vdc6dZGZfOud+C2BmF4Y5V4Xr26YhCdXiaJRQ3W+QnEyo3Rha9/ebQ0RERCSK1K9VjVM6NmbKgnXcMawjcbEasHxEGneCa2bCtJvg3ftgzexgmPb+nWVmFc0OZhe5kuBzEjuV7oDWJzgatgW1DIqIVEqhFI9izSwd2G9maUAMUOm2sRjcsTGDOzb2G2L/Tvj8TUi/GGJi/WYRERERiTIZ6cm8uWQjH6zazOAOnl/XRaPqdWD0BGh5IrxxBzx0wv92QKuWEAy27v/L0sHWPaDmcX7ziohIhQmleLQBeBhYDzxS5pyUtxVvQNFe6JLhO4mIiIhI1BncoTH1a8WTlZ2n4tHRMoPeV0PzdFj4AiR2CIpFjTuHbzc2ERGJeKHstqYtvypKTibUTQr+By0iIiIiR6RaXAxnd2vOy3PXsnNfIXVqxPuOFL2SewSHiIgIQQuaRIK938Cqd6DLqIMPJxQRERGRw8pIT2J/UQmvL9ZCeRERkfKiKkWkWPZq0FOuXdZEREREjlpqi/oc36g2mdm5vqOIiIhUGioeRYqcTDiuTbClqYiIiIgcFTMjIz2J2V9uZe3WPb7jiIiIVAqHLR6Z2SUHOyoiXJWxKx++nBWsOtL2piIiInIMzOwpM9tkZjmHeNzM7K9mtsrMFpXuqlupjExNAmDKgjzPSURERCqHUFYePQT0BHoBD5be9gxnqCpn2RRwJWpZExERkfLwDDD0Rx4fBrQvPa4B/lkBmSpUiwa16NOmAVnZeTjnfMcRERGJeqEUj/Kcczc6524AtgK3OeduDHOuqiUnCxI7QZPOvpOIiIhIlHPOvU/wmu1QRgLPucCnQH0za1Yx6SrO6PRkVm/ezYK123xHERERiXqhFI/izSzNzAYCNYC3zaxjmHNVHdvz4OuPISXDdxIRERGpGpKAtWXu55ae+wEzu8bM5prZ3Pz8/AoJV16GdW1K9bgYJs1X65qIiMixCqV4dBvwL+AB4OLSY3w4Q1UpSycDDrqoeCQiIiKRxTk33jnX0znXMzEx0XecI1KnRjynd2nK1IXrKCgq8R1HREQkqh22eOSce630RUNf59yHzrnVwJAKyFY15GRCs+7QqJ3vJCIiIlI15AEtytxPLj1X6WSkJ7FtTyEzV2zyHUVERCSqhbLb2q0HHsDYUJ7czIaa2YrS3Txu/5HrRpuZM7OqNYh765eQN0+DskVERKQiTQUuKd11rS+w3Tm33neocOjfrhGNEqqTlZ3rO4qIiEhUC6VtbRxQ5yDHjzKzWODvBDt6dAYuMLMfTIQ2szrATcDs0GNXEkuygtsuo/zmEBERkUrDzF4APgE6mFmumV1pZteZ2XWll0wHVgOrCEYTXO8patjFxcYwMrU5M5ZvYtueAt9xREREolZcCNesd87dexTP3RtYVdrmhpm9SLC7x9IDrvsdwTylcUfxNaJbTha06AP1W/pOIiIiIpWEc+6CwzzugJ9XUBzvMtKTmPDhl0xbtJ6L+7byHUdERCQqhbLy6Hgzm2xmL5rZI2YWao/VYXfyMLN0oIVz7rUfe6Jo3unjkPJXwMYctayJiIiIhFHnZnXp2LSOWtdERESOQSjFo5HAX4F/A8uAq8zsL8f6hc0sBngE+MXhro3mnT4OKScLLAY6n+M7iYiIiEilZWaMSkti/pptrM7f5TuOiIhIVAplt7VZzrkZpbuu/QsYDjQK4bkPt5NHHSAFeM/MvgL6AlOrxNBs54Jd1lr1gzpNfKcRERERqdTOSUsixmDy/Eq5qZyIiEjYhbLyCDNrYmbDzWw40NA5d1EInzYHaG9mbcysGnA+we4eADjntjvnGjnnWjvnWgOfAiOcc3OP/NuIMhsWw5aValkTERERqQBN6tagX7tGZM3Po6TE+Y4jIiISdQ5bPDKz84DPgJ8A5wGzzezcw32ec64IGAu8SdDu9rJzbomZ3WdmI44tdpTLyYSYOOhUtf8YRERERCpKRnoSud/sZc5XW31HERERiTqh7Lb2G6CXc24TgJklAu8AEw/3ic656QTbwZY9d9chrh0UQpbo51ww7+j4wVC7oe80IiIiIlXCGV2aUqtaDpPm59HneL0GExERORKhtK3FfFs4KrUlxM+Tg8mdC9vXqGVNREREpALVqhbHsJRmvLZoPfsKi33HERERiSqhFIHeMLM3zewyM7sMeA14PbyxKrGcTIitDh3P9J1EREREpEoZnZ7Ezv1FvL10o+8oIiIiUSWU3dbGAU8A3UqP8c65X4U7WKVUUgxLJkH706BGPd9pRERERKqUvsc3pFm9GmRl5/qOIiIiElVCmXmEcy4LyPr2fumuaw1K7/7bOadtK0Kx5hPYtUEtayIiIiIexMQY56QlMf791eTv3E9ineq+I4mIiESFQxaPzOygg61LXUewGgnAABWPQpGTCfG14IQzfCcRERERqZIy0pL453tfMHXhOq48uY3vOCIiIlHhx9rWrgF2H+Iods7dW3qUhD9mJVBcCEunQIdhUK227zQiIiIiVVL7JnXomlRPrWsiIiJH4Mfa1vKdcw8f7AEzGxOmPJXXl7Ngzxa1rImIiIh4lpGexL3TlrJiw046NK3jO46IiEjE+7GVR/Fmlmxmjc2s5gGPqU3tSOVkQfV60G6I7yQiIiIiVdrZ3ZsTF2NkzdfqIxERkVAcbre16cD7wCoz225mc8zsr0D98EerRIr2w7Jp0Gk4xGkwo4iIiIhPjRKqM6hDIpPn51FcovdERUREDueQxSPnXIpzrptzrqNzLgk4DrgA2Ai0NrNLSg+rqLBRa9U7sH8HpGT4TiIiIiIiwKi0ZDbu2M/HX2z2HUVERCTi/djMo+8pHYy9CrjfzLYAbQja17Tb2uHkZEKthtBmoO8kIiIiIgKc2qkxdWrEMSk7j/7tE33HERERiWghF4/Kcs49Xt5BKq2C3bDideh+PsTG+04jIiIiIkCN+FiGd2vO5Pl5/O6cImpXP6qXxSIiIlXC4WYeybH6/E0o3ANd1LImIiIiEkky0pPYW1jMGzkbfEcRERGJaCoehVtOJiQ0hVYn+U4iIiIiImX0bHUcLRrUZNL8PN9RREREIpqKR+G0bzusfBu6jIKYWN9pRERERKQMMyMjLZmPvtjM+u17fccRERGJWCoehdPy6VC8H1JG+04iIiIiIgeRkZ6EczB5/jrfUURERCKWikfhlJMJ9VpCck/fSURERETkIFo1rE2PVseRlZ2Lc9pAWERE5GBUPAqX3Vtg9UxIyQAz32lERERE5BAy0pNYuWkXS9bt8B1FREQkIql4FC7LpkJJkVrWRERERCLc8K7NqRYbQ2Z2ru8oIiIiEUnFo3BZkgUN20PTrr6TiIiIiMiPqFcrnlM7NWbqgnUUFpf4jiMiIhJxVDwKh50b4MsP1LImIiIiEiUy0pPZsruAD1bm+44iIiIScVQ8CoelUwAHXTJ8JxERERGREAw8IZEGtauRmZ3nO4qIiEjEUfEoHHIyoUkKNO7oO4mIiIiIhKBaXAwjujfn7aUb2b630HccERGRiKLiUXnbtgbWzg5a1kREREQkaoxKS6KgqITpi9f7jiIiIhJRVDwqb0smBbdqWRMRERGJKt2S69E2sTaT1LomIiLyPSoelbecTEjqAQ3a+E4iIiIiIkfAzMhIT+azr7ayZsse33FEREQihopH5WnLF7B+IaSM9p1ERERERI7COWlJAEyar9VHIiIi31LxqDzlZAEGXUb5TiIiIiIiRyGpfk1OPL4hWfNzcc75jiMiIhIRVDwqTzmZ0PJEqNvcdxIREREROUoZ6Ul8vWUP2Wu2+Y4iIiISEVQ8Ki8bl0L+Mu2yJiIiIhLlhnVtRo34GLKyc31HERERiQgqHpWXnEywGOh8ju8kIiIiUsWZ2VAzW2Fmq8zs9oM8fpmZ5ZvZgtLjKh85I1VC9TjO6NKUVxetZ39Rse84IiIi3ql4VB6cC4pHbQZCQqLvNCIiIlKFmVks8HdgGNAZuMDMOh/k0pecc6mlx5MVGjIKZKQns31vITOXb/IdRURExDsVj8rDuvnwzZfaZU1EREQiQW9glXNutXOuAHgRGOk5U9Tp17YhjetUJzNbu66JiIioeFQecjIhJh46DfedRERERCQJWFvmfm7puQONNrNFZjbRzFpUTLToERcbw8jU5sxcvomtuwt8xxEREfFKxaNjVVICSyZBuyFQ8zjfaURERERCMQ1o7ZzrBrwNPHuwi8zsGjOba2Zz8/PzKzRgJMhIT6aoxDFt4TrfUURERLxS8ehYrZ0NO/LUsiYiIiKRIg8ou5IoufTcd5xzW5xz+0vvPgn0ONgTOefGO+d6Oud6JiZWvbmOnZrVpVOzumTNV+uaiIhUbSoeHaslWRBXEzoM851EREREBGAO0N7M2phZNeB8YGrZC8ysWZm7I4BlFZgvqoxOT2Lh2m2s2rTLdxQRERFvVDw6FsVFQcvaCadD9QTfaURERERwzhUBY4E3CYpCLzvnlpjZfWY2ovSyG81siZktBG4ELvOTNvKN6N6cGINJ83N9RxEREfEmzneAqPb1h7A7Xy1rIiIiElGcc9OB6Qecu6vMx3cAd1R0rmjUuG4N+rdPZPL8dfzitA7ExJjvSCIiIhVOK4+ORU4mVEuA9qf7TiIiIiIiYZKRnkTetr3M/nKr7ygiIiJeqHh0tIoKYOlU6HgWxNf0nUZEREREwuT0zk1JqB5HVrZa10REpGpS8ehorZ4J+7apZU1ERESkkqtZLZZhKU2Zvng9ewuKfccRERGpcCoeHa2cTKhRH44f7DuJiIiIiIRZRnoyuwuKeWvpBt9RREREKpyKR0ejcC8sfw06j4C4ar7TiIiIiEiY9WnTgKT6NcnKzvMdRUREpMKpeHQ0Vr4NBbvUsiYiIiJSRcTEGOekNeeDlfls2rHPdxwREZEKpeLR0cjJhNqJ0Opk30lEREREpIKMSkumxMHUhet8RxEREalQYS0emdlQM1thZqvM7PaDPH6rmS01s0Vm9q6ZtQpnnnKxfyd8/iZ0Pgdi43ynEREREZEK0q5xAt1b1CdTrWsiIlLFhK14ZGaxwN+BYUBn4AIz63zAZfOBns65bsBE4E/hylNuVrwBRXvVsiYiIiJSBWWkJbFs/Q6WrtvhO4qIiEiFCefKo97AKufcaudcAfAiMLLsBc65mc65PaV3PwWSw5infORkQt0kaNHHdxIRERERqWBnd29OXIwxaX6u7ygiIiIVJpzFoyRgbZn7uaXnDuVK4PUw5jl2e7+BVe9Al1EQo3FRIiIiIlVNg9rVGNyxMZMXrKOouMR3HBERkQoRERUQMxsD9AQePMTj15jZXDObm5+fX7Hhylr2KpQUqmVNREREpAobnZ5E/s79fPTFFt9RREREKkQ4i0d5QIsy95NLz32PmQ0BfgOMcM7tP9gTOefGO+d6Oud6JiYmhiVsSHIy4bg20DzNXwYRERER8Wpwx8bUqxlPVrZa10REpGoI53Zhc4D2ZtaGoGh0PnBh2QvMLA14AhjqnNsUxizHblc+fDkLTr4VzHynEfGqsLCQ3Nxc9u3b5zuKiESxGjVqkJycTHx8vO8oIkekelwsw7s1IzM7l137i0iorh14RUSkcgvb/+mcc0VmNhZ4E4gFnnLOLTGz+4C5zrmpBG1qCcArFhRk1jjnRoQr0zFZNgVcCaRk+E4i4l1ubi516tShdevWmIqpInIUnHNs2bKF3Nxc2rRp4zuOyBHLSE/m+dlreH3xen7Ss8XhP0FERCSKhfVtEufcdGD6AefuKvPxkHB+/XKVkwWJHaFxZ99JRLzbt2+fCkcickzMjIYNG+J1lqHIMUhvWZ/WDWuRlZ2n4pGIiFR6ETEwO+Jtz4OvPw4GZeuXZREAFY5E5Jjp3xGJZmbGqLRkPlm9hbxte33HERERCSsVj0KxdDLgoIta1kQiSUpKCp07dyY1NZWkpCTuuece35Ekwjz55JP079+fnj176ufjAGvWrOHiiy+md+/epKSksHnzZt+RRKLOqLQkACbP/8GeMCIiIpWKpvuFIicTmnWHRu18JxGRA7z++uu0atWKhx56iF27dvmOIxFkwoQJfPrpp7z66qvUq1fPd5yIsm/fPi644ALuv/9+Bg4cqBVAIkepZcNa9G7dgKzsXK4f1FZ/l0REpNLSyqPD2fol5M0LWtZEJKIUFhZSvXr1H5x3zjFu3DhSUlLo2rUrL7300nePvffee9SrV4/U1FSaNm3KQw89BMBrr71Gly5dSE1NJTExkWeeeeYHzzto0CA6dOhA586d6du3L+vWrQNg3rx5DBw4kB49enDGGWewfv36766/6aabSE1NJSUlhc8++wyAe+6557uvCzB8+HDee+89ABISEn7wdVNSUvjqq6+YM2cO3bp1Y9++fezevZsuXbqQk5Pzg+sfeeQRUlJSSElJ4dFHHwVg3Lhx333PSUlJpKamctddd33vz+P444/nkUceAaC4uJhx48bRq1cvunXrxhNPPAHARRddRGpqKg0aNKBNmzakpqby+OOPs2/fPi6//HK6du1KWloaM2fOBOCZZ54hMTGR7t27065dO1544YUf5H3mmWcYO3bsd/fHjh373Z//fffdR69evUhJSeGaa67BOfeDz//qq6845ZRT6NatG6eeeipr1qwBYPz48axdu5aTTz6Zvn37smjRIkpKSmjfvv13c3ZKSkpo164d+fn5DBo0iLlz5/4g07Rp0+jTpw9paWkMGTKEjRs3/uCa+++/nxNOOIGUlBTuvffe77KV/e/57X/HA7/H3bt3c8UVV9C7d2/S0tKYMmXKd89vZixfvhyAZcuWYWaH/Nn8NnvZr7tr1y5OPfVU0tPT6dq163fPPWPGDPbu3cvYsWPp2rUrt91223ef+8ILL9C1a1dSUlK+dz4hIYFbbrmFLl26cOqpp373Z/jFF18wdOhQevToQf/+/b/LK1JVjEpP4ov83SzK3e47ioiISNho5dHhLMkKbruM8ptDJELdO20JS9ftKNfn7Ny8Lnef3eWw1+3cuZM6der84HxWVhYLFixg4cKFbN68mV69ejFgwACaNWtGcXExAwcOZOrUqd9rY7rrrrt49tln6dmz5/cKGQd6/vnn6dGjByNGjGDu3LkMGzaMG264gSlTppCYmMhLL73Eb37zG5566ikA9uzZw4IFC3j//fe54oorDlrsCVWvXr0YMWIEd955J3v37mXMmDGkpKR875p58+bx9NNPM3v2bJxz9OnTh4EDB/Lggw8CQeEqISGBX/7yl0BQTOvfvz+vvvoqc+bM4dprr+XWW29lwoQJ1KtXjzlz5rB//3769evH6aefzvPPPw/AZZddxvDhwzn33HMBePjhhzEzFi9ezPLlyzn99NP5/PPPAfjpT3/KY489xiuv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\n","text/plain":["<Figure size 1440x360 with 2 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["----------------------------------------------------------------------------------------------------\n","Нейросеть: Embedding/20\n","Класс: Лесков                74% сеть отнесла к классу Лесков               - ВЕРНО :-)\n","Класс: Тургенев              45% сеть отнесла к классу Тургенев             - ВЕРНО :-)\n","Класс: Катаев                67% сеть отнесла к классу Катаев               - ВЕРНО :-)\n","Класс: Васильев             100% сеть отнесла к классу Васильев             - ВЕРНО :-)\n","Класс: Гоголь                68% сеть отнесла к классу Гоголь               - ВЕРНО :-)\n","Класс: Грибоедов             94% сеть отнесла к классу Грибоедов            - ВЕРНО :-)\n","Класс: Беляев                56% сеть отнесла к классу Беляев               - ВЕРНО :-)\n","Класс: Пастернак             94% сеть отнесла к классу Пастернак            - ВЕРНО :-)\n","Класс: Шолохов               86% сеть отнесла к классу Шолохов              - ВЕРНО :-)\n","Класс: Пушкин                76% сеть отнесла к классу Пушкин               - ВЕРНО :-)\n","Класс: Горький               78% сеть отнесла к классу Горький              - ВЕРНО :-)\n","Класс: Куприн                76% сеть отнесла к классу Куприн               - ВЕРНО :-)\n","Класс: Носов                 88% сеть отнесла к классу Носов                - ВЕРНО :-)\n","Класс: Булгаков              87% сеть отнесла к классу Булгаков             - ВЕРНО :-)\n","Класс: Каверин               78% сеть отнесла к классу Каверин              - ВЕРНО :-)\n","Класс: Чехов                 90% сеть отнесла к классу Чехов                - ВЕРНО :-)\n","Класс: Толстой               98% сеть отнесла к классу Толстой              - ВЕРНО :-)\n","Класс: Лермонтов             72% сеть отнесла к классу Лермонтов            - ВЕРНО :-)\n","Класс: Достоевский           80% сеть отнесла к классу Достоевский          - ВЕРНО :-)\n","Класс: Гончаров              82% сеть отнесла к классу Гончаров             - ВЕРНО :-)\n","\n","Средняя точность распознавания:  79%\n"]}]},{"cell_type":"code","source":["#save model\n","model_text_emb_200.save('writters_model.h5')\n","\n","# authorize to google disk's account\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","#save model to google disk\n","!cp writters_model.h5 /content/drive/MyDrive/Colab_support/"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sadD3fyrRmWB","executionInfo":{"status":"ok","timestamp":1645381458537,"user_tz":-180,"elapsed":17777,"user":{"displayName":"Kirill Volkov","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09167675469754145494"}},"outputId":"c02b37ec-0f8a-4f63-fccb-3c0a75c5644b"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["# load presaved model\n","from google.colab import drive\n","from tensorflow.keras.models import load_model\n","\n","drive.mount('/content/drive')\n","\n","!cp /content/drive/MyDrive/Colab_support/writters_model.h5 /content/\n","\n","model_text_emb_200 = load_model('writters_model.h5') "],"metadata":{"id":"hW9U7ZQ1RxcG"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Make prediction on our example"],"metadata":{"id":"wmoePIFuPhtm"}},{"cell_type":"code","source":["subdir = ''\n","with open(f'./rec_1d/refer/островский.txt', 'r', encoding = \"windows-1251\") as f:\n","            text = f.read()\n","\n","sample2predict = text"],"metadata":{"id":"dKYZd6ziH6PE","executionInfo":{"status":"ok","timestamp":1645381484076,"user_tz":-180,"elapsed":262,"user":{"displayName":"Kirill Volkov","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09167675469754145494"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["sample2predict[:200]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":71},"id":"lUCvXofjaw-5","executionInfo":{"status":"ok","timestamp":1645382153053,"user_tz":-180,"elapsed":305,"user":{"displayName":"Kirill Volkov","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09167675469754145494"}},"outputId":"a55021aa-72d0-4d0d-f971-2af2391a14aa"},"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'ВВЕДЕНИЕ\\n«Гроза» – одна из самых ярких, необычных и острых по проблематике  пьес русского репертуара. На  протяжении почти полутора столетий отношение к драме не устоялось, каждая новая театральная по'"]},"metadata":{},"execution_count":30}]},{"cell_type":"markdown","source":["### Preproccess the example to the appropriate form"],"metadata":{"id":"6GSJyiRwPmAL"}},{"cell_type":"code","source":["# Построение частотного словаря по тестовому тексту\n","tokenizer.fit_on_texts([sample2predict])\n","\n","# Преобразование входных текстов в последовательности индексов (для архитектур с embedding)\n","# Применено приведение к массиву объектов для дальнейшего разделения на выборки\n","seq_predict = np.array(tokenizer.texts_to_sequences([sample2predict]))\n","\n","# Снижение размерности входных данных:\n","# ограничение длины последовательностей до разумного предела\n","seq_max_len = 1000\n","x_predict_clip = pad_sequences(seq_predict, maxlen=seq_max_len)"],"metadata":{"id":"2gfx-TsEJXF5","executionInfo":{"status":"ok","timestamp":1645383031964,"user_tz":-180,"elapsed":1731,"user":{"displayName":"Kirill Volkov","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09167675469754145494"}}},"execution_count":49,"outputs":[]},{"cell_type":"code","source":["# make prediction\n","y_pred = model_text_emb_200.predict(x_predict_clip)\n","\n","pred = np.argmax(y_pred)\n","CLASS_LIST[pred]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":37},"id":"QdPEzvbKPWDm","executionInfo":{"status":"ok","timestamp":1645383449288,"user_tz":-180,"elapsed":423,"user":{"displayName":"Kirill Volkov","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09167675469754145494"}},"outputId":"5c0e60bc-4edb-4ddd-e9df-3c7ddb45f3b1"},"execution_count":66,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'Каверин'"]},"metadata":{},"execution_count":66}]},{"cell_type":"code","source":["#show all predictions in the ascending order\n","zipped_lists = zip(y_pred.tolist()[0], CLASS_LIST)\n","sorted_pairs = sorted(zipped_lists)\n","tuples = zip(*sorted_pairs)\n","list1, list2 = [list(tuple) for tuple in tuples]"],"metadata":{"id":"LSIyiPykebgs","executionInfo":{"status":"ok","timestamp":1645383326683,"user_tz":-180,"elapsed":8,"user":{"displayName":"Kirill Volkov","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09167675469754145494"}}},"execution_count":63,"outputs":[]},{"cell_type":"code","source":["list1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_7qbFbtleh8I","executionInfo":{"status":"ok","timestamp":1645383328021,"user_tz":-180,"elapsed":5,"user":{"displayName":"Kirill Volkov","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09167675469754145494"}},"outputId":"6c249df3-86cf-46f0-9435-4f8e007ac020"},"execution_count":64,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[2.1181516984825066e-08,\n"," 1.1284287211310584e-06,\n"," 1.4828784742348944e-06,\n"," 3.4765873806463787e-06,\n"," 4.7031630856508855e-06,\n"," 5.129319106345065e-06,\n"," 5.291338766255649e-06,\n"," 2.3005559341982007e-05,\n"," 3.807029133895412e-05,\n"," 0.00016007537487894297,\n"," 0.0002951135393232107,\n"," 0.0004957360215485096,\n"," 0.0010012075072154403,\n"," 0.0012723950203508139,\n"," 0.002197669353336096,\n"," 0.004662806633859873,\n"," 0.019661732017993927,\n"," 0.030154893174767494,\n"," 0.04222505912184715,\n"," 0.8977909088134766]"]},"metadata":{},"execution_count":64}]},{"cell_type":"code","source":["list2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xBbwDWlteh_r","executionInfo":{"status":"ok","timestamp":1645383331013,"user_tz":-180,"elapsed":322,"user":{"displayName":"Kirill Volkov","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09167675469754145494"}},"outputId":"7e05edea-509a-45ee-a1b8-a60bb687f3ac"},"execution_count":65,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['Тургенев',\n"," 'Горький',\n"," 'Чехов',\n"," 'Гончаров',\n"," 'Гоголь',\n"," 'Лермонтов',\n"," 'Толстой',\n"," 'Куприн',\n"," 'Лесков',\n"," 'Достоевский',\n"," 'Пушкин',\n"," 'Беляев',\n"," 'Пастернак',\n"," 'Катаев',\n"," 'Васильев',\n"," 'Носов',\n"," 'Шолохов',\n"," 'Грибоедов',\n"," 'Булгаков',\n"," 'Каверин']"]},"metadata":{},"execution_count":65}]},{"cell_type":"markdown","source":["## Alternative model"],"metadata":{"id":"-rP7psm0gAle"}},{"cell_type":"code","source":["#Создаём сеть с Embedding слоем\n","model_text_emb_lstm = Sequential()\n","model_text_emb_lstm.add(Embedding(VOCAB_SIZE, 200, input_length=seq_max_len))\n","\n","model_text_emb_lstm.add(Bidirectional(LSTM(4, return_sequences=1)))\n","# Слой подвыборки/пулинга с функцией максимума\n","model_text_emb_lstm.add(MaxPooling1D(2))\n","model_text_emb_lstm.add(Dropout(0.2))\n","\n","model_text_emb_lstm.add(Conv1D(128, 10, padding=\"valid\", activation=\"relu\", strides=3))\n","model_text_emb_lstm.add(Dropout(0.3))\n","model_text_emb_lstm.add(Conv1D(256, 10, padding=\"same\", activation=\"relu\", strides=3))\n","model_text_emb_lstm.add(GlobalMaxPooling1D())\n","\n","#model_text_emb_lstm.add(SpatialDropout1D(0.2))\n","model_text_emb_lstm.add(Flatten())\n","model_text_emb_lstm.add(BatchNormalization())\n","model_text_emb_lstm.add(Dense(200, activation=\"relu\"))\n","model_text_emb_lstm.add(Dropout(0.3))\n","model_text_emb_lstm.add(Dense(200, activation=\"relu\"))\n","model_text_emb_lstm.add(Dropout(0.3))\n","#model_text_emb_lstm.add(BatchNormalization())\n","model_text_emb_lstm.add(Dense(CLASS_COUNT, activation='softmax'))\n","\n","compile_train_eval_model(model_text_emb_lstm,\n","                         x_train_clip, y_train,\n","                         x_test_clip, y_test,\n","                         epochs=10,\n","                         class_labels=CLASS_LIST,\n","                         title='Embedding/20')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"6uC9fm4z74eD","executionInfo":{"status":"ok","timestamp":1645389816437,"user_tz":-180,"elapsed":6054382,"user":{"displayName":"Kirill Volkov","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09167675469754145494"}},"outputId":"1fa279a6-7ed4-41de-8f6e-703701bc4f45"},"execution_count":71,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_3\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding_3 (Embedding)     (None, 1000, 200)         4000000   \n","                                                                 \n"," bidirectional_2 (Bidirectio  (None, 1000, 8)          6560      \n"," nal)                                                            \n","                                                                 \n"," max_pooling1d (MaxPooling1D  (None, 500, 8)           0         \n"," )                                                               \n","                                                                 \n"," dropout_3 (Dropout)         (None, 500, 8)            0         \n","                                                                 \n"," conv1d_5 (Conv1D)           (None, 164, 128)          10368     \n","                                                                 \n"," dropout_4 (Dropout)         (None, 164, 128)          0         \n","                                                                 \n"," conv1d_6 (Conv1D)           (None, 55, 256)           327936    \n","                                                                 \n"," global_max_pooling1d_2 (Glo  (None, 256)              0         \n"," balMaxPooling1D)                                                \n","                                                                 \n"," flatten_1 (Flatten)         (None, 256)               0         \n","                                                                 \n"," batch_normalization_1 (Batc  (None, 256)              1024      \n"," hNormalization)                                                 \n","                                                                 \n"," dense_3 (Dense)             (None, 200)               51400     \n","                                                                 \n"," dropout_5 (Dropout)         (None, 200)               0         \n","                                                                 \n"," dense_4 (Dense)             (None, 200)               40200     \n","                                                                 \n"," dropout_6 (Dropout)         (None, 200)               0         \n","                                                                 \n"," dense_5 (Dense)             (None, 20)                4020      \n","                                                                 \n","=================================================================\n","Total params: 4,441,508\n","Trainable params: 4,440,996\n","Non-trainable params: 512\n","_________________________________________________________________\n","Epoch 1/10\n","270/270 [==============================] - 582s 2s/step - loss: 1.1249 - accuracy: 0.6424 - val_loss: 1.4341 - val_accuracy: 0.7123\n","Epoch 2/10\n","270/270 [==============================] - 590s 2s/step - loss: 0.0927 - accuracy: 0.9693 - val_loss: 1.1743 - val_accuracy: 0.6933\n","Epoch 3/10\n","270/270 [==============================] - 582s 2s/step - loss: 0.0554 - accuracy: 0.9803 - val_loss: 1.1889 - val_accuracy: 0.7685\n","Epoch 4/10\n","270/270 [==============================] - 594s 2s/step - loss: 0.0468 - accuracy: 0.9829 - val_loss: 1.6168 - val_accuracy: 0.7219\n","Epoch 5/10\n","270/270 [==============================] - 595s 2s/step - loss: 0.0375 - accuracy: 0.9856 - val_loss: 1.9007 - val_accuracy: 0.7174\n","Epoch 6/10\n","270/270 [==============================] - 595s 2s/step - loss: 0.0396 - accuracy: 0.9853 - val_loss: 2.6367 - val_accuracy: 0.6745\n","Epoch 7/10\n","270/270 [==============================] - 595s 2s/step - loss: 0.0383 - accuracy: 0.9857 - val_loss: 2.0862 - val_accuracy: 0.7018\n","Epoch 8/10\n","270/270 [==============================] - 594s 2s/step - loss: 0.0445 - accuracy: 0.9844 - val_loss: 1.3303 - val_accuracy: 0.7768\n","Epoch 9/10\n","270/270 [==============================] - 610s 2s/step - loss: 0.0201 - accuracy: 0.9909 - val_loss: 1.1707 - val_accuracy: 0.8117\n","Epoch 10/10\n","270/270 [==============================] - 607s 2s/step - loss: 0.0353 - accuracy: 0.9865 - val_loss: 1.5862 - val_accuracy: 0.7442\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1440x360 with 2 Axes>"]},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["----------------------------------------------------------------------------------------------------\n","Нейросеть: Embedding/20\n","Класс: Лесков                69% сеть отнесла к классу Лесков               - ВЕРНО :-)\n","Класс: Тургенев              43% сеть отнесла к классу Куприн               - НЕВЕРНО :-(\n","Класс: Катаев                89% сеть отнесла к классу Катаев               - ВЕРНО :-)\n","Класс: Васильев             100% сеть отнесла к классу Васильев             - ВЕРНО :-)\n","Класс: Гоголь                61% сеть отнесла к классу Гоголь               - ВЕРНО :-)\n","Класс: Грибоедов             55% сеть отнесла к классу Грибоедов            - ВЕРНО :-)\n","Класс: Беляев                31% сеть отнесла к классу Беляев               - ВЕРНО :-)\n","Класс: Пастернак             81% сеть отнесла к классу Пастернак            - ВЕРНО :-)\n","Класс: Шолохов               93% сеть отнесла к классу Шолохов              - ВЕРНО :-)\n","Класс: Пушкин                63% сеть отнесла к классу Пушкин               - ВЕРНО :-)\n","Класс: Горький               82% сеть отнесла к классу Горький              - ВЕРНО :-)\n","Класс: Куприн                64% сеть отнесла к классу Куприн               - ВЕРНО :-)\n","Класс: Носов                 92% сеть отнесла к классу Носов                - ВЕРНО :-)\n","Класс: Булгаков              87% сеть отнесла к классу Булгаков             - ВЕРНО :-)\n","Класс: Каверин               97% сеть отнесла к классу Каверин              - ВЕРНО :-)\n","Класс: Чехов                 59% сеть отнесла к классу Чехов                - ВЕРНО :-)\n","Класс: Толстой               78% сеть отнесла к классу Толстой              - ВЕРНО :-)\n","Класс: Лермонтов             74% сеть отнесла к классу Лермонтов            - ВЕРНО :-)\n","Класс: Достоевский           86% сеть отнесла к классу Достоевский          - ВЕРНО :-)\n","Класс: Гончаров              84% сеть отнесла к классу Гончаров             - ВЕРНО :-)\n","\n","Средняя точность распознавания:  73%\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"EAshwx9EgHpu"},"execution_count":null,"outputs":[]}]}